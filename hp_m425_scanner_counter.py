#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HP LaserJet Pro 400 MFP M425 PCL Scanner Counter Control
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è HP LaserJet Pro 400 MFP M425 PCL
"""

import argparse
import sys
import time
import tempfile
import os
import json
import re
import subprocess
import platform
from typing import Optional, Dict, List
from datetime import datetime


class CounterStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_file: str = "m425_counter_config.json"):
        self.config_file = config_file
        self.config = self._load_config()
    
    def _load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è M425
        return {
            "scanner_counter": 0,
            "last_updated": None,
            "printer_model": "HP LaserJet Pro 400 MFP M425",
            "printer_info": {},
            "command_history": [],
            "mfp_features": {
                "scan_enabled": True,
                "copy_enabled": True,
                "fax_enabled": True
            }
        }
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_counter(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        return self.config.get("scanner_counter", 0)
    
    def set_counter(self, value: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        self.config["scanner_counter"] = value
        self.config["last_updated"] = datetime.now().isoformat()
        self._add_to_history(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {value}")
        self._save_config()
    
    def _add_to_history(self, action: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if "command_history" not in self.config:
            self.config["command_history"] = []
        
        self.config["command_history"].append({
            "timestamp": datetime.now().isoformat(),
            "action": action
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        self.config["command_history"] = self.config["command_history"][-10:]
    
    def get_history(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        return self.config.get("command_history", [])


class HPM425Printer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HP LaserJet Pro 400 MFP M425 PCL —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    
    def __init__(self, timeout: int = 15):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è M425 MFP
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è MFP)
        """
        self.timeout = timeout
        self.system = platform.system().lower()
        self.printer_name = None
        self.printer_port = None
        self.storage = CounterStorage()
        self.model_variations = [
            "HP LaserJet Pro 400 MFP M425",
            "HP LaserJet Pro 400 M425",
            "M425",
            "M425dn",
            "M425dw",
            "LaserJet Pro 400 MFP"
        ]
        
    def find_m425_printers(self) -> List[Dict[str, str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç HP M425 –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
        printers = []
        
        print("üîç –ü–æ–∏—Å–∫ HP LaserJet Pro 400 MFP M425 PCL –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
        
        if self.system == "windows":
            printers = self._find_windows_m425()
        elif self.system == "linux":
            printers = self._find_linux_m425()
        else:
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {self.system} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        return printers
    
    def _find_windows_m425(self) -> List[Dict[str, str]]:
        """–ü–æ–∏—Å–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Windows"""
        printers = []
        
        try:
            print("   üñ•Ô∏è  –ü–æ–∏—Å–∫ M425 —á–µ—Ä–µ–∑ Windows...")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ M425
            search_queries = [
                'Name like "%M425%" or Name like "%400 MFP%"',
                'Name like "%LaserJet Pro 400%" and Name like "%MFP%"',
                'DriverName like "%M425%" or DriverName like "%400 MFP%"'
            ]
            
            for query in search_queries:
                try:
                    result = subprocess.run([
                        'wmic', 'printer', 'where', query,
                        'get', 'Name,PortName,DriverName,Status'
                    ], capture_output=True, text=True, timeout=20)
                    
                    if result.returncode == 0:
                        lines = result.stdout.strip().split('\n')[1:]
                        for line in lines:
                            if line.strip():
                                parts = [p.strip() for p in line.split('\t') if p.strip()]
                                if len(parts) >= 2:
                                    printer_info = {
                                        'name': parts[1] if len(parts) > 1 else 'Unknown',
                                        'port': parts[2] if len(parts) > 2 else 'Unknown',
                                        'driver': parts[0] if len(parts) > 0 else 'Unknown',
                                        'status': parts[3] if len(parts) > 3 else 'Unknown',
                                        'type': 'USB' if 'USB' in parts[2] else 'Network',
                                        'model': 'M425 MFP'
                                    }
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ M425
                                    if self._is_m425_printer(printer_info):
                                        printers.append(printer_info)
                except:
                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç—ã
            print("   üîå –ü–æ–∏—Å–∫ M425 —á–µ—Ä–µ–∑ USB –ø–æ—Ä—Ç—ã...")
            for port in ['USB001', 'USB002', 'USB003', 'USB004']:
                try:
                    result = subprocess.run([
                        'wmic', 'printer', 'where', f'PortName="{port}"',
                        'get', 'Name,DriverName'
                    ], capture_output=True, text=True, timeout=10)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        lines = result.stdout.strip().split('\n')[1:]
                        for line in lines:
                            if line.strip() and any(model in line for model in self.model_variations):
                                printers.append({
                                    'name': line.strip(),
                                    'port': port,
                                    'type': 'USB',
                                    'model': 'M425 MFP',
                                    'detected_via': 'port_scan'
                                })
                except:
                    continue
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ M425 –≤ Windows: {e}")
        
        return printers
    
    def _find_linux_m425(self) -> List[Dict[str, str]]:
        """–ü–æ–∏—Å–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Linux"""
        printers = []
        
        try:
            print("   üêß –ü–æ–∏—Å–∫ M425 —á–µ—Ä–µ–∑ Linux...")
            
            # –ß–µ—Ä–µ–∑ CUPS
            result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True, timeout=15)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if any(model.lower() in line.lower() for model in self.model_variations):
                        printers.append({
                            'name': line.strip(),
                            'port': 'CUPS',
                            'type': 'CUPS',
                            'model': 'M425 MFP'
                        })
            
            # –ß–µ—Ä–µ–∑ lsusb –¥–ª—è USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'hewlett-packard' in line.lower() and ('m425' in line.lower() or 'laserjet' in line.lower()):
                        printers.append({
                            'name': line.strip(),
                            'port': 'USB',
                            'type': 'USB',
                            'model': 'M425 MFP'
                        })
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ M425 –≤ Linux: {e}")
        
        return printers
    
    def _is_m425_printer(self, printer_info: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä M425"""
        name = printer_info.get('name', '').lower()
        driver = printer_info.get('driver', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏ –¥—Ä–∞–π–≤–µ—Ä—É
        for variation in self.model_variations:
            if variation.lower() in name or variation.lower() in driver:
                return True
        
        return False
    
    def connect(self, printer_info: Optional[Dict[str, str]] = None, 
                interactive: bool = False, usb_port: Optional[str] = None) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä—É"""
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π USB –ø–æ—Ä—Ç
        if usb_port:
            self.printer_name = f"HP M425 MFP on {usb_port}"
            self.printer_port = usb_port
            print(f"‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω USB –ø–æ—Ä—Ç: {usb_port}")
            return True
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
        if printer_info:
            self.printer_name = printer_info.get('name')
            self.printer_port = printer_info.get('port')
            print(f"‚úì –í—ã–±—Ä–∞–Ω M425: {self.printer_name} ({self.printer_port})")
            return True
        
        # –ü–æ–∏—Å–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        printers = self.find_m425_printers()
        if not printers:
            print("‚ùå HP M425 –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            if interactive:
                return self._manual_usb_port_selection()
            return False
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
        if interactive:
            return self._interactive_m425_selection(printers)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ M425
            self.printer_name = printers[0].get('name')
            self.printer_port = printers[0].get('port')
            print(f"‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω M425: {self.printer_name} ({self.printer_port})")
            return True
    
    def _interactive_m425_selection(self, printers: List[Dict[str, str]]) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ HP M425 MFP –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
        print("-" * 60)
        
        for i, printer in enumerate(printers, 1):
            print(f"{i}. {printer.get('name', 'Unknown')}")
            print(f"   –ú–æ–¥–µ–ª—å: {printer.get('model', 'M425 MFP')}")
            print(f"   –¢–∏–ø: {printer.get('type', 'Unknown')}")
            print(f"   –ü–æ—Ä—Ç: {printer.get('port', 'Unknown')}")
            if 'driver' in printer:
                print(f"   –î—Ä–∞–π–≤–µ—Ä: {printer['driver']}")
            if 'status' in printer:
                print(f"   –°—Ç–∞—Ç—É—Å: {printer['status']}")
            print()
        
        print(f"{len(printers) + 1}. –£–∫–∞–∑–∞—Ç—å USB –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é")
        print(f"{len(printers) + 2}. –û—Ç–º–µ–Ω–∞")
        print()
        
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ M425 –ø—Ä–∏–Ω—Ç–µ—Ä (1-{len(printers) + 2}): ").strip()
                if not choice:
                    continue
                    
                choice_num = int(choice)
                
                if 1 <= choice_num <= len(printers):
                    selected = printers[choice_num - 1]
                    self.printer_name = selected.get('name')
                    self.printer_port = selected.get('port')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
                    self.storage.config['selected_printer'] = selected
                    self.storage._save_config()
                    
                    print(f"‚úì –í—ã–±—Ä–∞–Ω M425: {self.printer_name} ({self.printer_port})")
                    return True
                    
                elif choice_num == len(printers) + 1:
                    return self._manual_usb_port_selection()
                    
                elif choice_num == len(printers) + 2:
                    print("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                    return False
                else:
                    print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(printers) + 2}")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                print("\n‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                return False
    
    def _manual_usb_port_selection(self) -> bool:
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞ –¥–ª—è M425"""
        print("\nüîå –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ USB –ø–æ—Ä—Ç–∞ –¥–ª—è M425")
        print("-" * 50)
        
        if self.system == "windows":
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ USB –ø–æ—Ä—Ç—ã –≤ Windows: USB001, USB002, USB003, USB004")
            print("   M425 MFP –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç USB001")
        elif self.system == "linux":
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Linux: /dev/usb/lp0, /dev/usb/lp1, /dev/usb/lp2")
            print("   M425 MFP –æ–±—ã—á–Ω–æ: /dev/usb/lp0")
        
        available_ports = self._get_available_usb_ports()
        if available_ports:
            print(f"\nüìç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ USB –ø–æ—Ä—Ç—ã: {', '.join(available_ports)}")
        
        while True:
            try:
                port = input("\n–í–≤–µ–¥–∏—Ç–µ USB –ø–æ—Ä—Ç –¥–ª—è M425 (–∏–ª–∏ 'cancel'): ").strip()
                
                if port.lower() in ['cancel', '–æ—Ç–º–µ–Ω–∞', 'c']:
                    return False
                
                if not port:
                    print("‚ùå –ü–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue
                
                normalized_port = self._normalize_usb_port(port)
                if not normalized_port:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞")
                    continue
                
                self.printer_name = f"HP M425 MFP on {normalized_port}"
                self.printer_port = normalized_port
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
                self.storage.config['selected_printer'] = {
                    'name': self.printer_name,
                    'port': self.printer_port,
                    'type': 'Manual USB',
                    'model': 'M425 MFP',
                    'manual': True
                }
                self.storage._save_config()
                
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω USB –ø–æ—Ä—Ç –¥–ª—è M425: {normalized_port}")
                return True
                
            except KeyboardInterrupt:
                print("\n‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
                return False
    
    def _get_available_usb_ports(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USB –ø–æ—Ä—Ç–æ–≤"""
        ports = []
        
        if self.system == "windows":
            for port in ['USB001', 'USB002', 'USB003', 'USB004']:
                try:
                    result = subprocess.run([
                        'wmic', 'printer', 'where', f'PortName="{port}"', 'get', 'Name'
                    ], capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        ports.append(port)
                except:
                    continue
        
        elif self.system == "linux":
            import os
            for i in range(4):
                device_path = f'/dev/usb/lp{i}'
                if os.path.exists(device_path):
                    ports.append(device_path)
        
        return ports
    
    def _normalize_usb_port(self, port: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞"""
        port = port.strip().upper()
        
        if self.system == "windows":
            if port.startswith('USB'):
                return port
            elif port.isdigit():
                return f"USB{port.zfill(3)}"
        
        elif self.system == "linux":
            if port.startswith('/dev/usb/lp'):
                return port
            elif port.startswith('lp') and port[2:].isdigit():
                return f"/dev/usb/{port}"
            elif port.isdigit():
                return f"/dev/usb/lp{port}"
        
        return None
    
    def send_m425_pjl_command(self, command: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PJL –∫–æ–º–∞–Ω–¥—É —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è M425 MFP"""
        if not self.printer_name:
            print("‚ùå M425 –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º PJL –∫–æ–º–∞–Ω–¥—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è MFP
        full_command = f"\x1B%-12345X@PJL\r\n@PJL COMMENT M425 MFP SCANNER COMMAND\r\n{command}\r\n@PJL EOJ\r\n\x1B%-12345X"
        
        print(f"‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ M425 –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        if self.system == "windows":
            return self._send_windows_command(full_command)
        elif self.system == "linux":
            return self._send_linux_command(full_command)
        else:
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {self.system} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return False
    
    def _send_windows_command(self, command: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã M425 –≤ Windows"""
        try:
            with tempfile.NamedTemporaryFile(mode='w', suffix='.prn', delete=False) as f:
                f.write(command)
                temp_file = f.name
            
            try:
                # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ M425
                if self.printer_name and 'M425' in self.printer_name:
                    cmd = f'copy /B "{temp_file}" "\\\\localhost\\{self.printer_name}"'
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
                    if result.returncode == 0:
                        print("‚úì M425 –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
                        return True
                
                # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ USB –ø–æ—Ä—Ç
                if self.printer_port and 'USB' in self.printer_port:
                    cmd = f'copy /B "{temp_file}" "{self.printer_port}"'
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)
                    if result.returncode == 0:
                        print(f"‚úì M425 –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç {self.printer_port}")
                        return True
                
                # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ M425 —á–µ—Ä–µ–∑ WMI
                return self._send_m425_via_wmi(temp_file)
                    
            finally:
                try:
                    os.unlink(temp_file)
                except:
                    pass
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ M425 –∫–æ–º–∞–Ω–¥—ã –≤ Windows: {e}")
            return False
    
    def _send_m425_via_wmi(self, temp_file: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã M425 —á–µ—Ä–µ–∑ WMI"""
        try:
            ps_script = f'''
$m425Printers = Get-WmiObject -Class Win32_Printer | Where-Object {{
    $_.Name -like "*M425*" -or 
    $_.Name -like "*400 MFP*" -or
    $_.DriverName -like "*M425*"
}} | Select-Object -First 1

if ($m425Printers) {{
    try {{
        $content = Get-Content -Path "{temp_file}" -Raw -Encoding Byte
        [System.IO.File]::WriteAllBytes("\\\\localhost\\$($m425Printers.Name)", $content)
        "Success: Command sent to $($m425Printers.Name)"
    }} catch {{
        "Error: $($_.Exception.Message)"
    }}
}} else {{
    "Error: No M425 printer found"
}}
'''
            result = subprocess.run([
                'powershell', '-ExecutionPolicy', 'Bypass', '-Command', ps_script
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and "Success" in result.stdout:
                print("‚úì M425 –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WMI")
                return True
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ WMI –¥–ª—è M425: {e}")
        
        return False
    
    def _send_linux_command(self, command: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã M425 –≤ Linux"""
        try:
            # –ü–æ–∏—Å–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ CUPS
            if 'CUPS' in str(self.printer_port):
                try:
                    # –ò—â–µ–º M425 –ø—Ä–∏–Ω—Ç–µ—Ä –≤ CUPS
                    result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True, timeout=10)
                    if result.returncode == 0:
                        for line in result.stdout.split('\n'):
                            if any(model.lower() in line.lower() for model in self.model_variations):
                                printer_name = line.split()[1] if len(line.split()) > 1 else None
                                if printer_name:
                                    proc = subprocess.Popen(['lp', '-d', printer_name, '-o', 'raw'], 
                                                          stdin=subprocess.PIPE)
                                    proc.communicate(command.encode('ascii'), timeout=30)
                                    if proc.returncode == 0:
                                        print(f"‚úì M425 –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ CUPS: {printer_name}")
                                        return True
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ CUPS –¥–ª—è M425: {e}")
            
            # –ß–µ—Ä–µ–∑ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            usb_devices = ['/dev/usb/lp0', '/dev/usb/lp1', '/dev/usb/lp2']
            for device in usb_devices:
                try:
                    if os.path.exists(device):
                        with open(device, 'wb') as f:
                            f.write(command.encode('ascii'))
                        print(f"‚úì M425 –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {device}")
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ M425 –∫–æ–º–∞–Ω–¥—ã –≤ Linux: {e}")
            return False
    
    def get_m425_scanner_counter(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP"""
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP...")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è M425 MFP
        m425_commands = [
            "@PJL INQUIRE SCANCOUNTER",
            "@PJL INQUIRE SCANCOUNT",
            "@PJL INQUIRE MFPSCANCOUNT",
            "@PJL INQUIRE SCANPAGES",
            "@PJL INFO SCANCOUNTER",
            "@PJL INFO SCANCOUNT",
            "@PJL INFO MFPSCANCOUNT",
            "@PJL DINQUIRE SCANCOUNTER",
            "@PJL USTATUS DEVICE",
            "@PJL INFO STATUS"
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç—ã)
        for command in m425_commands:
            if self.send_m425_pjl_command(command):
                print(f"   ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
                time.sleep(0.5)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
        real_counter = self._try_get_m425_real_counter()
        if real_counter is not None:
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ M425: {real_counter}")
            self.storage.set_counter(real_counter)
            return real_counter
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cached_counter = self.storage.get_counter()
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ M425: {cached_counter}")
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–≤—è–∑—å")
        
        return cached_counter
    
    def _try_get_m425_real_counter(self) -> Optional[int]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ M425 —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        
        if self.system == "windows":
            return self._get_m425_windows_counter()
        elif self.system == "linux":
            return self._get_m425_linux_counter()
        
        return None
    
    def _get_m425_windows_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ M425 –≤ Windows —á–µ—Ä–µ–∑ WMI"""
        try:
            print("   üñ•Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è M425 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ WMI...")
            
            ps_script = '''
$m425Printer = Get-WmiObject -Class Win32_Printer | Where-Object {
    $_.Name -like "*M425*" -or 
    $_.Name -like "*400 MFP*" -or
    $_.DriverName -like "*M425*"
} | Select-Object -First 1

if ($m425Printer) {
    try {
        Write-Output "Found M425: $($m425Printer.Name)"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $printer = $m425Printer | Select-Object Name, PrinterStatus, JobCountSinceLastReset, PagesPrinted, TotalPagesPrinted
        $printer | Format-List
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç
        $port = Get-WmiObject -Class Win32_TCPIPPrinterPort | Where-Object {$_.Name -eq $m425Printer.PortName}
        if ($port) {
            $port | Select-Object Name, HostAddress, ByteCount | Format-List
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        Get-WmiObject -Class Win32_PerfRawData_Spooler_PrintQueue | Where-Object {$_.Name -like "*$($m425Printer.Name)*"} | Format-List
        
    } catch {
        Write-Output "Error getting M425 details: $($_.Exception.Message)"
    }
} else {
    Write-Output "No M425 printer found in WMI"
}
'''
            
            result = subprocess.run([
                'powershell', '-Command', ps_script
            ], capture_output=True, text=True, timeout=25)
            
            if result.returncode == 0 and result.stdout:
                output = result.stdout
                print(f"   üìã M425 WMI –æ—Ç–≤–µ—Ç: {output[:300]}...")
                
                # –ò—â–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –≤—ã–≤–æ–¥–µ
                patterns = [
                    r'TotalPagesPrinted\s*:\s*(\d+)',
                    r'PagesPrinted\s*:\s*(\d+)',
                    r'JobCountSinceLastReset\s*:\s*(\d+)',
                    r'ByteCount\s*:\s*(\d+)',
                    r':\s*(\d{2,6})'
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, output, re.IGNORECASE)
                    for match in matches:
                        try:
                            value = int(match)
                            if 10 <= value <= 999999:
                                print(f"   ‚úì –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ M425: {value}")
                                return value
                        except ValueError:
                            continue
                            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ WMI –¥–ª—è M425: {e}")
        
        return None
    
    def _get_m425_linux_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ M425 –≤ Linux —á–µ—Ä–µ–∑ CUPS"""
        try:
            print("   üêß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è M425 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ CUPS...")
            
            # –ò—â–µ–º M425 –≤ CUPS
            result = subprocess.run(['lpstat', '-l', '-p'], capture_output=True, text=True, timeout=15)
            if result.returncode == 0:
                output = result.stdout
                print(f"   üìã CUPS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {output[:200]}...")
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å M425
                m425_lines = [line for line in output.split('\n') 
                             if any(model.lower() in line.lower() for model in self.model_variations)]
                
                if m425_lines:
                    print(f"   ‚úì –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ M425: {len(m425_lines)}")
                    
                    # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    all_text = ' '.join(m425_lines)
                    numbers = re.findall(r'\b(\d{2,6})\b', all_text)
                    if numbers:
                        valid_numbers = [int(n) for n in numbers if 10 <= int(n) <= 999999]
                        if valid_numbers:
                            counter = max(valid_numbers)
                            print(f"   ‚úì –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ M425: {counter}")
                            return counter
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–∏—è
            result = subprocess.run(['lpstat', '-W', 'completed'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0 and result.stdout:
                numbers = re.findall(r'\b(\d{2,6})\b', result.stdout)
                if numbers:
                    valid_numbers = [int(n) for n in numbers if 50 <= int(n) <= 999999]
                    if valid_numbers:
                        counter = max(valid_numbers)
                        print(f"   ‚úì –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ M425: {counter}")
                        return counter
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ CUPS –¥–ª—è M425: {e}")
        
        return None
    
    def set_m425_scanner_counter(self, count: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP"""
        print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP –Ω–∞ {count}...")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è M425 MFP
        m425_commands = [
            f"@PJL SET SCANCOUNTER={count}",
            f"@PJL SET SCANCOUNT={count}",
            f"@PJL SET MFPSCANCOUNT={count}",
            f"@PJL DEFAULT SCANCOUNTER={count}",
            f"@PJL DEFAULT SCANCOUNT={count}",
            f"@PJL COMMENT SETTING M425 SCANNER COUNTER TO {count}"
        ]
        
        success = False
        for command in m425_commands:
            if self.send_m425_pjl_command(command):
                success = True
                time.sleep(0.7)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è MFP
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            self.storage.set_counter(count)
            print(f"‚úì M425 —Å—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {count}")
            print("üíæ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ M425 –Ω–∞ {count}")
            return False
    
    def reset_m425_scanner_counter(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP –≤ 0"""
        print("\nüîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP...")
        return self.set_m425_scanner_counter(0)
    
    def get_m425_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ M425 MFP"""
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ M425 MFP...")
        
        info = {
            "connection_type": "system_only",
            "printer_model": "HP LaserJet Pro 400 MFP M425 PCL",
            "printer_name": self.printer_name or "Unknown",
            "printer_port": self.printer_port or "Unknown",
            "system": self.system,
            "cached_counter": str(self.storage.get_counter()),
            "mfp_features": "Scan, Copy, Print, Fax"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è M425
        m425_info_commands = {
            "model": "@PJL INFO ID",
            "status": "@PJL INFO STATUS",
            "memory": "@PJL INFO MEMORY",
            "mfp_status": "@PJL USTATUS DEVICE",
            "scan_status": "@PJL INFO SCANSTATUS"
        }
        
        for key, command in m425_info_commands.items():
            if self.send_m425_pjl_command(command):
                info[f"{key}_sent"] = "‚úì"
            else:
                info[f"{key}_sent"] = "‚ùå"
        
        return info
    
    def get_saved_printer(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        return self.storage.config.get('selected_printer')
    
    def get_command_history(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ M425"""
        return self.storage.get_history()
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ M425 MFP –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def print_m425_list(printers: List[Dict[str, str]]):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"""
    if not printers:
        print("‚ùå HP M425 MFP –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ M425 MFP –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {len(printers)}")
    print("-" * 70)
    
    for i, printer in enumerate(printers, 1):
        print(f"{i}. {printer.get('name', 'Unknown')}")
        print(f"   –ú–æ–¥–µ–ª—å: {printer.get('model', 'M425 MFP')}")
        print(f"   –¢–∏–ø: {printer.get('type', 'Unknown')}")
        print(f"   –ü–æ—Ä—Ç: {printer.get('port', 'Unknown')}")
        if 'driver' in printer:
            print(f"   –î—Ä–∞–π–≤–µ—Ä: {printer['driver']}")
        if 'status' in printer:
            print(f"   –°—Ç–∞—Ç—É—Å: {printer['status']}")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="HP LaserJet Pro 400 MFP M425 PCL Scanner Counter Control",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è M425 MFP:
  python hp_m425_scanner_counter.py --list
  python hp_m425_scanner_counter.py --get
  python hp_m425_scanner_counter.py --set 1000
  python hp_m425_scanner_counter.py --reset
  python hp_m425_scanner_counter.py --info
  python hp_m425_scanner_counter.py --history
  
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä M425:
  python hp_m425_scanner_counter.py --interactive --get
  python hp_m425_scanner_counter.py -i --set 1000
  
–£–∫–∞–∑–∞–Ω–∏–µ USB –ø–æ—Ä—Ç–∞ –¥–ª—è M425:
  python hp_m425_scanner_counter.py --usb-port USB001 --get
  python hp_m425_scanner_counter.py --usb-port 1 --get
        """
    )
    
    parser.add_argument("--timeout", type=int, default=15, help="–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è MFP (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)")
    parser.add_argument("--list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
    parser.add_argument("--history", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥")
    parser.add_argument("--interactive", "-i", action="store_true", 
                       help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
    parser.add_argument("--usb-port", "-p", type=str, metavar="PORT",
                       help="–£–∫–∞–∑–∞—Ç—å USB –ø–æ—Ä—Ç –¥–ª—è M425 (–Ω–∞–ø—Ä–∏–º–µ—Ä: USB001, 1)")
    parser.add_argument("--select", action="store_true", 
                       help="–í—ã–±—Ä–∞—Ç—å M425 –ø—Ä–∏–Ω—Ç–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    parser.add_argument("--use-saved", action="store_true",
                       help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π M425 –ø—Ä–∏–Ω—Ç–µ—Ä")
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--get", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425")
    group.add_argument("--set", type=int, metavar="COUNT", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425")
    group.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425")
    group.add_argument("--info", action="store_true", help="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ M425 MFP")
    
    args = parser.parse_args()
    
    print("üñ®Ô∏è  HP LaserJet Pro 400 MFP M425 PCL Scanner Counter Control")
    print("=" * 70)
    print("‚ÑπÔ∏è  –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è M425 MFP")
    print("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Å–∫–∞–Ω–µ—Ä, –∫–æ–ø–∏—Ä, –ø—Ä–∏–Ω—Ç–µ—Ä, —Ñ–∞–∫—Å")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å M425
    printer = HPM425Printer(timeout=args.timeout)
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        if args.list:
            printers = printer.find_m425_printers()
            print_m425_list(printers)
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
        if args.history:
            history = printer.get_command_history()
            if history:
                print("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ M425:")
                print("-" * 50)
                for entry in history[-10:]:
                    timestamp = entry.get('timestamp', 'Unknown')
                    action = entry.get('action', 'Unknown')
                    print(f"üìÖ {timestamp}")
                    print(f"   {action}")
                    print()
            else:
                print("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ M425 –ø—É—Å—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ M425
        saved_printer = None
        usb_port = None
        
        if args.usb_port:
            usb_port = printer._normalize_usb_port(args.usb_port)
            if not usb_port:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π USB –ø–æ—Ä—Ç –¥–ª—è M425: {args.usb_port}")
                sys.exit(1)
        
        if args.use_saved:
            saved_printer = printer.get_saved_printer()
            if saved_printer:
                print(f"üìÅ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π M425: {saved_printer.get('name')} ({saved_printer.get('port')})")
            else:
                print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π M425 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–æ–ª—å–∫–æ –≤—ã–±–æ—Ä M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        if args.select:
            print("üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
            success = printer.connect(saved_printer, interactive=True, usb_port=usb_port)
            if success:
                print("‚úÖ M425 –ø—Ä–∏–Ω—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("‚ùå M425 –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
                sys.exit(1)
            return
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ M425
        interactive_mode = args.interactive and not usb_port
        
        success = printer.connect(
            printer_info=saved_printer if args.use_saved else None,
            interactive=interactive_mode,
            usb_port=usb_port
        )
        
        if not success:
            print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è M425:")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive –¥–ª—è –≤—ã–±–æ—Ä–∞ M425 –∏–∑ —Å–ø–∏—Å–∫–∞")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --usb-port PORT –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö M425")
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å M425
        if args.get:
            counter = printer.get_m425_scanner_counter()
            print(f"\nüìä –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP: {counter}")
            
        elif args.set is not None:
            if args.set < 0:
                print("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                sys.exit(1)
            
            if printer.set_m425_scanner_counter(args.set):
                print(f"\n‚úÖ –°—á–µ—Ç—á–∏–∫ M425 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args.set}")
            else:
                print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ M425 –Ω–∞ {args.set}")
                sys.exit(1)
                
        elif args.reset:
            if printer.reset_m425_scanner_counter():
                print("\n‚úÖ –°—á–µ—Ç—á–∏–∫ M425 —Å–±—Ä–æ—à–µ–Ω –≤ 0")
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ M425")
                sys.exit(1)
                
        elif args.info:
            info = printer.get_m425_info()
            print("\n" + "="*50)
            print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û M425 MFP")
            print("="*50)
            for key, value in info.items():
                print(f"{key.upper()}: {value}")
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ M425
            counter = printer.get_m425_scanner_counter()
            print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ M425 MFP: {counter}")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        printer.disconnect()


if __name__ == "__main__":
    main()
