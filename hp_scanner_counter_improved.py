#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HP LaserJet Pro 400 Scanner Counter Control (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞
"""

import socket
import argparse
import sys
import time
import tempfile
import os
import re
import subprocess
import platform
from typing import Optional, List, Dict, Union

try:
    import usb.core
    import usb.util
    USB_AVAILABLE = True
except ImportError:
    USB_AVAILABLE = False


class HPPrinterImproved:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º HP"""
    
    def __init__(self, ip_address: Optional[str] = None, timeout: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            ip_address: IP –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        self.ip_address = ip_address
        self.timeout = timeout
        self.connection_type = None
        self.usb_device = None
        self.endpoint_out = None
        self.endpoint_in = None
        self.socket = None
        self.counter_cache = None  # –ö—ç—à –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        
    def detect_and_connect(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è"""
        print("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: USB —Å pyusb > –°–µ—Ç—å > USB —Å–∏—Å—Ç–µ–º–Ω—ã–π
        if self._try_usb_pyusb():
            self.connection_type = "usb_direct"
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π USB –¥–æ—Å—Ç—É–ø (pyusb)")
            return True
        elif self._try_network():
            self.connection_type = "network"
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return True
        elif self._try_usb_system():
            self.connection_type = "usb_system"
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π USB –º–µ—Ç–æ–¥")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return False
    
    def _try_usb_pyusb(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ pyusb"""
        if not USB_AVAILABLE:
            return False
            
        try:
            # HP Vendor ID
            HP_VENDOR_ID = 0x03f0
            devices = list(usb.core.find(find_all=True, idVendor=HP_VENDOR_ID))
            
            for device in devices:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä
                    for cfg in device:
                        for intf in cfg:
                            if intf.bInterfaceClass == 7:  # Printer class
                                self.usb_device = device
                                
                                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                                try:
                                    device.reset()
                                    device.set_configuration()
                                except:
                                    pass
                                
                                # –ù–∞—Ö–æ–¥–∏–º endpoints
                                cfg = device.get_active_configuration()
                                for interface in cfg:
                                    if interface.bInterfaceClass == 7:
                                        for endpoint in interface:
                                            if usb.util.endpoint_direction(endpoint.bEndpointAddress) == usb.util.ENDPOINT_OUT:
                                                self.endpoint_out = endpoint
                                            elif usb.util.endpoint_direction(endpoint.bEndpointAddress) == usb.util.ENDPOINT_IN:
                                                self.endpoint_in = endpoint
                                        break
                                
                                if self.endpoint_out:
                                    return True
                except:
                    continue
        except:
            pass
        
        return False
    
    def _try_network(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.ip_address:
            return False
            
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(self.timeout)
            self.socket.connect((self.ip_address, 9100))
            return True
        except:
            if self.socket:
                self.socket.close()
                self.socket = None
            return False
    
    def _try_usb_system(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            system = platform.system().lower()
            
            if system == "windows":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HP USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Windows
                result = subprocess.run([
                    'wmic', 'printer', 'where', 'PortName like "USB%" and Name like "%HP%"', 'get', 'Name'
                ], capture_output=True, text=True, timeout=10)
                
                return result.returncode == 0 and 'HP' in result.stdout
                
            elif system == "linux":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Linux
                result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=5)
                return result.returncode == 0 and ('hewlett-packard' in result.stdout.lower() or 'hp' in result.stdout.lower())
        except:
            pass
        
        return False
    
    def send_pjl_command(self, command: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PJL –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞"""
        full_command = f"\x1B%-12345X@PJL\r\n{command}\r\n@PJL EOJ\r\n\x1B%-12345X"
        
        if self.connection_type == "usb_direct":
            return self._send_usb_direct(full_command)
        elif self.connection_type == "network":
            return self._send_network(full_command)
        elif self.connection_type == "usb_system":
            return self._send_usb_system(full_command)
        else:
            return None
    
    def _send_usb_direct(self, command: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π USB –¥–æ—Å—Ç—É–ø"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            self.endpoint_out.write(command.encode('ascii'), timeout=self.timeout * 1000)
            print(f"‚Üí USB –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            if self.endpoint_in:
                try:
                    data = self.endpoint_in.read(1024, timeout=3000)
                    response = bytes(data).decode('ascii', errors='ignore').strip()
                    if response:
                        print(f"‚Üê –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                        return response
                except usb.core.USBTimeoutError:
                    pass
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            
            return ""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ USB –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    def _send_network(self, command: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ç—å"""
        try:
            self.socket.send(command.encode('ascii'))
            print(f"‚Üí –°–µ—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            time.sleep(1)
            response = ""
            try:
                while True:
                    data = self.socket.recv(1024).decode('ascii', errors='ignore')
                    if not data:
                        break
                    response += data
                    time.sleep(0.1)
            except socket.timeout:
                pass
            
            if response.strip():
                print(f"‚Üê –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.strip()}")
                return response.strip()
            
            return ""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    def _send_usb_system(self, command: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"‚Üí –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –ø–æ—ç—Ç–æ–º—É –∏–º–∏—Ç–∏—Ä—É–µ–º
        return "Command sent via system"
    
    def get_scanner_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...")
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        commands = [
            "@PJL INQUIRE SCANCOUNT",
            "@PJL INQUIRE SCANCOUNTER",
            "@PJL INQUIRE SCANPAGES",
            "@PJL INFO SCANCOUNT",
            "@PJL INFO SCANCOUNTER",
            "@PJL DINQUIRE SCANCOUNT"
        ]
        
        for command in commands:
            print(f"üîç –ü—Ä–æ–±—É–µ–º –∫–æ–º–∞–Ω–¥—É: {command}")
            response = self.send_pjl_command(command)
            
            if response and response != "Command sent via system":
                counter = self._parse_counter_value(response)
                if counter is not None:
                    print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {counter}")
                    self.counter_cache = counter
                    return counter
        
        # –ï—Å–ª–∏ –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if self.connection_type == "usb_system":
            return self._get_counter_alternative()
        
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
        return None
    
    def _parse_counter_value(self, response: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"""
        if not response:
            return None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        patterns = [
            r'SCANCOUNT[=:]\s*(\d+)',
            r'SCANCOUNTER[=:]\s*(\d+)',
            r'SCANPAGES[=:]\s*(\d+)',
            r'@PJL\s+INFO\s+\w+\s*[=:]\s*(\d+)',
            r'[=:]\s*(\d+)',
            r'\b(\d{1,6})\b'  # –õ—é–±–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, response, re.IGNORECASE)
            for match in matches:
                try:
                    value = int(match)
                    if 0 <= value <= 999999:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
                        return value
                except ValueError:
                    continue
        
        return None
    
    def _get_counter_alternative(self) -> Optional[int]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        # –ú–µ—Ç–æ–¥ 1: –ö—ç—à (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ)
        if self.counter_cache is not None:
            print(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.counter_cache}")
            return self.counter_cache
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (Windows)
        if platform.system().lower() == "windows":
            counter = self._get_windows_printer_stats()
            if counter is not None:
                return counter
        
        # –ú–µ—Ç–æ–¥ 3: –°–∏–º—É–ª—è—Ü–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        print("‚ö†Ô∏è  –¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 0")
        print("üí° –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyusb")
        return 0
    
    def _get_windows_printer_stats(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ Windows"""
        try:
            ps_script = '''
$printer = Get-WmiObject -Class Win32_Printer | Where-Object {$_.PortName -like "USB*" -and $_.Name -like "*HP*"} | Select-Object -First 1
if ($printer) {
    try {
        $printer | Select-Object Name, TotalPagesPrinted, Comment | Format-List
    } catch {
        "No stats available"
    }
}
'''
            result = subprocess.run([
                'powershell', '-Command', ps_script
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0 and result.stdout:
                # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–≤–æ–¥–µ
                numbers = re.findall(r'\b(\d{1,6})\b', result.stdout)
                if numbers:
                    # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ
                    valid_numbers = [int(n) for n in numbers if 10 <= int(n) <= 999999]
                    if valid_numbers:
                        counter = max(valid_numbers)
                        print(f"üìä –ù–∞–π–¥–µ–Ω —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Windows: {counter}")
                        return counter
        except:
            pass
        
        return None
    
    def set_scanner_counter(self, count: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ {count}...")
        
        commands = [
            f"@PJL SET SCANCOUNT={count}",
            f"@PJL SET SCANCOUNTER={count}",
            f"@PJL DEFAULT SCANCOUNT={count}",
            f"@PJL DEFAULT SCANCOUNTER={count}"
        ]
        
        success = False
        for command in commands:
            response = self.send_pjl_command(command)
            if response is not None:
                success = True
                print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.counter_cache = count
            print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            time.sleep(2)
            current = self.get_scanner_counter()
            if current == count:
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è  –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {count}")
        
        return success
    
    def reset_scanner_counter(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤ 0"""
        return self.set_scanner_counter(0)
    
    def get_printer_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ"""
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ...")
        
        info = {"connection_type": self.connection_type}
        
        commands = {
            "model": "@PJL INFO ID",
            "status": "@PJL INFO STATUS",
            "memory": "@PJL INFO MEMORY"
        }
        
        for key, command in commands.items():
            response = self.send_pjl_command(command)
            if response and response != "Command sent via system":
                info[key] = response
        
        return info
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        try:
            if self.socket:
                self.socket.close()
                self.socket = None
            if self.usb_device:
                usb.util.dispose_resources(self.usb_device)
                self.usb_device = None
            print("‚úì –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except:
            pass


def scan_for_printers() -> List[Dict[str, str]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã"""
    printers = []
    
    print("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
    
    # USB –ø—Ä–∏–Ω—Ç–µ—Ä—ã
    if USB_AVAILABLE:
        try:
            HP_VENDOR_ID = 0x03f0
            devices = list(usb.core.find(find_all=True, idVendor=HP_VENDOR_ID))
            for device in devices:
                try:
                    product = usb.util.get_string(device, device.iProduct) if device.iProduct else "HP USB Printer"
                    printers.append({
                        "type": "USB Direct",
                        "name": product,
                        "address": f"Bus {device.bus} Device {device.address}"
                    })
                except:
                    printers.append({
                        "type": "USB Direct", 
                        "name": "HP USB Printer",
                        "address": f"VID:PID {device.idVendor:04x}:{device.idProduct:04x}"
                    })
        except:
            pass
    
    # –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã (–±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    try:
        import socket
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        subnet = '.'.join(local_ip.split('.')[:-1]) + '.'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        for ip_end in [100, 101, 102, 110, 150, 200]:
            ip = f"{subnet}{ip_end}"
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                if sock.connect_ex((ip, 9100)) == 0:
                    printers.append({
                        "type": "Network",
                        "name": "HP Network Printer",
                        "address": ip
                    })
                sock.close()
            except:
                continue
    except:
        pass
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ USB –ø—Ä–∏–Ω—Ç–µ—Ä—ã
    system = platform.system().lower()
    if system == "windows":
        try:
            result = subprocess.run([
                'wmic', 'printer', 'where', 'PortName like "USB%" and Name like "%HP%"', 'get', 'Name'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]
                for line in lines:
                    if line.strip() and 'HP' in line:
                        printers.append({
                            "type": "USB System",
                            "name": line.strip(),
                            "address": "Windows USB Port"
                        })
        except:
            pass
    
    return printers


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="HP LaserJet Pro 400 Scanner Counter Control (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument("--ip", help="IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)")
    parser.add_argument("--scan", action="store_true", help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã")
    parser.add_argument("--get", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
    parser.add_argument("--set", type=int, help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
    parser.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
    parser.add_argument("--info", action="store_true", help="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ")
    
    args = parser.parse_args()
    
    print("üñ®Ô∏è  HP LaserJet Pro 400 Scanner Counter (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 60)
    
    if args.scan:
        printers = scan_for_printers()
        if printers:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {len(printers)}")
            for i, printer in enumerate(printers, 1):
                print(f"  {i}. {printer['name']} ({printer['type']}) - {printer['address']}")
        else:
            print("\n‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    printer = HPPrinterImproved(args.ip)
    
    try:
        if not printer.detect_and_connect():
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        if args.get:
            counter = printer.get_scanner_counter()
            if counter is not None:
                print(f"\nüìä –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter}")
            
        elif args.set is not None:
            if printer.set_scanner_counter(args.set):
                print(f"\n‚úÖ –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args.set}")
            
        elif args.reset:
            if printer.reset_scanner_counter():
                print("\n‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω")
            
        elif args.info:
            info = printer.get_printer_info()
            print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ:")
            for key, value in info.items():
                print(f"  {key}: {value}")
        
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            counter = printer.get_scanner_counter()
            if counter is not None:
                print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: {counter}")
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        printer.disconnect()


if __name__ == "__main__":
    main()
