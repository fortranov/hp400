#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HP LaserJet Pro 400 Scanner Counter Control (–¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
"""

import argparse
import sys
import time
import tempfile
import os
import json
import re
import subprocess
import platform
from typing import Optional, Dict, List
from datetime import datetime


class CounterStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_file: str = "printer_counter_config.json"):
        self.config_file = config_file
        self.config = self._load_config()
    
    def _load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return {
            "scanner_counter": 0,
            "last_updated": None,
            "printer_info": {},
            "command_history": []
        }
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_counter(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        return self.config.get("scanner_counter", 0)
    
    def set_counter(self, value: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        self.config["scanner_counter"] = value
        self.config["last_updated"] = datetime.now().isoformat()
        self._add_to_history(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫: {value}")
        self._save_config()
    
    def _add_to_history(self, action: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if "command_history" not in self.config:
            self.config["command_history"] = []
        
        self.config["command_history"].append({
            "timestamp": datetime.now().isoformat(),
            "action": action
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        self.config["command_history"] = self.config["command_history"][-10:]
    
    def get_history(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        return self.config.get("command_history", [])


class HPPrinterSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    
    def __init__(self, timeout: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.timeout = timeout
        self.system = platform.system().lower()
        self.printer_name = None
        self.printer_port = None
        self.storage = CounterStorage()
        
    def find_hp_printers(self) -> List[Dict[str, str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç HP –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
        printers = []
        
        print("üîç –ü–æ–∏—Å–∫ HP –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...")
        
        if self.system == "windows":
            printers = self._find_windows_printers()
        elif self.system == "linux":
            printers = self._find_linux_printers()
        else:
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {self.system} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        return printers
    
    def _find_windows_printers(self) -> List[Dict[str, str]]:
        """–ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Windows"""
        printers = []
        
        try:
            # –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
            print("   üñ•Ô∏è  –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
            result = subprocess.run([
                'wmic', 'printer', 'where', 
                'PortName like "USB%" and (Name like "%HP%" or Name like "%Hewlett%")',
                'get', 'Name,PortName,DriverName'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines:
                    if line.strip():
                        parts = [p.strip() for p in line.split() if p.strip()]
                        if len(parts) >= 2:
                            printers.append({
                                'name': ' '.join(parts[:-2]) if len(parts) > 2 else parts[0],
                                'port': parts[-2] if len(parts) > 1 else 'USB',
                                'driver': parts[-1] if len(parts) > 2 else 'Unknown',
                                'type': 'USB'
                            })
            
            # –ü–æ–∏—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
            print("   üåê –ü–æ–∏—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
            result = subprocess.run([
                'wmic', 'printer', 'where',
                'PortName like "IP%" and (Name like "%HP%" or Name like "%Hewlett%")',
                'get', 'Name,PortName'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]
                for line in lines:
                    if line.strip():
                        parts = [p.strip() for p in line.split() if p.strip()]
                        if len(parts) >= 2:
                            printers.append({
                                'name': ' '.join(parts[:-1]),
                                'port': parts[-1],
                                'type': 'Network'
                            })
                            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Windows: {e}")
        
        return printers
    
    def _find_linux_printers(self) -> List[Dict[str, str]]:
        """–ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Linux"""
        printers = []
        
        try:
            # –ß–µ—Ä–µ–∑ CUPS
            print("   üêß –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ CUPS...")
            result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'hp' in line.lower() or 'hewlett' in line.lower():
                        printers.append({
                            'name': line.strip(),
                            'port': 'CUPS',
                            'type': 'CUPS'
                        })
            
            # –ß–µ—Ä–µ–∑ lsusb
            print("   üîå –ü–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'hewlett-packard' in line.lower() or ('hp' in line.lower() and 'printer' in line.lower()):
                        printers.append({
                            'name': line.strip(),
                            'port': 'USB',
                            'type': 'USB'
                        })
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Linux: {e}")
        
        return printers
    
    def connect(self, printer_info: Optional[Dict[str, str]] = None, 
                interactive: bool = False, usb_port: Optional[str] = None) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É (–≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã)
        
        Args:
            printer_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ –∏–∑ find_hp_printers()
            interactive: –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            usb_port: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å USB –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "USB001")
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π USB –ø–æ—Ä—Ç
        if usb_port:
            self.printer_name = f"HP Printer on {usb_port}"
            self.printer_port = usb_port
            print(f"‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω USB –ø–æ—Ä—Ç: {usb_port}")
            return True
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
        if printer_info:
            self.printer_name = printer_info.get('name')
            self.printer_port = printer_info.get('port')
            print(f"‚úì –í—ã–±—Ä–∞–Ω –ø—Ä–∏–Ω—Ç–µ—Ä: {self.printer_name} ({self.printer_port})")
            return True
        
        # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        printers = self.find_hp_printers()
        if not printers:
            print("‚ùå HP –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞
            if interactive:
                return self._manual_usb_port_selection()
            return False
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
        if interactive:
            return self._interactive_printer_selection(printers)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            self.printer_name = printers[0].get('name')
            self.printer_port = printers[0].get('port')
            print(f"‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: {self.printer_name} ({self.printer_port})")
            return True
    
    def _interactive_printer_selection(self, printers: List[Dict[str, str]]) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
        print("-" * 60)
        
        for i, printer in enumerate(printers, 1):
            print(f"{i}. {printer.get('name', 'Unknown')}")
            print(f"   –¢–∏–ø: {printer.get('type', 'Unknown')}")
            print(f"   –ü–æ—Ä—Ç: {printer.get('port', 'Unknown')}")
            if 'driver' in printer:
                print(f"   –î—Ä–∞–π–≤–µ—Ä: {printer['driver']}")
            print()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ USB –ø–æ—Ä—Ç–∞
        print(f"{len(printers) + 1}. –£–∫–∞–∑–∞—Ç—å USB –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é")
        print(f"{len(printers) + 2}. –û—Ç–º–µ–Ω–∞")
        print()
        
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä (1-{len(printers) + 2}): ").strip()
                if not choice:
                    continue
                    
                choice_num = int(choice)
                
                if 1 <= choice_num <= len(printers):
                    # –í—ã–±—Ä–∞–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
                    selected = printers[choice_num - 1]
                    self.printer_name = selected.get('name')
                    self.printer_port = selected.get('port')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    self.storage.config['selected_printer'] = selected
                    self.storage._save_config()
                    
                    print(f"‚úì –í—ã–±—Ä–∞–Ω: {self.printer_name} ({self.printer_port})")
                    return True
                    
                elif choice_num == len(printers) + 1:
                    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞
                    return self._manual_usb_port_selection()
                    
                elif choice_num == len(printers) + 2:
                    # –û—Ç–º–µ–Ω–∞
                    print("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                    return False
                else:
                    print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(printers) + 2}")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                print("\n‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                return False
    
    def _manual_usb_port_selection(self) -> bool:
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞"""
        print("\nüîå –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ USB –ø–æ—Ä—Ç–∞")
        print("-" * 40)
        
        if self.system == "windows":
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ USB –ø–æ—Ä—Ç—ã –≤ Windows: USB001, USB002, USB003, USB004")
            print("   –û–±—ã—á–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç USB001")
        elif self.system == "linux":
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Linux: /dev/usb/lp0, /dev/usb/lp1, /dev/usb/lp2")
            print("   –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä: 0, 1, 2")
        
        available_ports = self._get_available_usb_ports()
        if available_ports:
            print(f"\nüìç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ USB –ø–æ—Ä—Ç—ã: {', '.join(available_ports)}")
        
        print("\n‚ùì –ü—Ä–∏–º–µ—Ä—ã:")
        if self.system == "windows":
            print("   USB001, USB002, USB003")
        else:
            print("   /dev/usb/lp0, lp0, 0")
        
        while True:
            try:
                port = input("\n–í–≤–µ–¥–∏—Ç–µ USB –ø–æ—Ä—Ç (–∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
                
                if port.lower() in ['cancel', '–æ—Ç–º–µ–Ω–∞', 'c']:
                    print("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
                    return False
                
                if not port:
                    print("‚ùå –ü–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥
                normalized_port = self._normalize_usb_port(port)
                if not normalized_port:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞")
                    continue
                
                self.printer_name = f"HP Printer on {normalized_port}"
                self.printer_port = normalized_port
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
                self.storage.config['selected_printer'] = {
                    'name': self.printer_name,
                    'port': self.printer_port,
                    'type': 'Manual USB',
                    'manual': True
                }
                self.storage._save_config()
                
                print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω USB –ø–æ—Ä—Ç: {normalized_port}")
                return True
                
            except KeyboardInterrupt:
                print("\n‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
                return False
    
    def _get_available_usb_ports(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USB –ø–æ—Ä—Ç–æ–≤"""
        ports = []
        
        if self.system == "windows":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ USB –ø–æ—Ä—Ç—ã Windows
            for port in ['USB001', 'USB002', 'USB003', 'USB004']:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–µ
                    result = subprocess.run([
                        'wmic', 'printer', 'where', f'PortName="{port}"', 'get', 'Name'
                    ], capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        ports.append(port)
                except:
                    continue
        
        elif self.system == "linux":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Linux
            import os
            for i in range(4):
                device_path = f'/dev/usb/lp{i}'
                if os.path.exists(device_path):
                    ports.append(device_path)
        
        return ports
    
    def _normalize_usb_port(self, port: str) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ USB –ø–æ—Ä—Ç–∞"""
        port = port.strip().upper()
        
        if self.system == "windows":
            # Windows USB –ø–æ—Ä—Ç—ã
            if port.startswith('USB'):
                return port
            elif port.isdigit():
                port_num = port.zfill(3)  # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –¥–æ 3 —Ü–∏—Ñ—Ä
                return f"USB{port_num}"
            elif len(port) <= 3 and port.isdigit():
                return f"USB{port.zfill(3)}"
        
        elif self.system == "linux":
            # Linux USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if port.startswith('/dev/usb/lp'):
                return port
            elif port.startswith('lp') and port[2:].isdigit():
                return f"/dev/usb/{port}"
            elif port.isdigit():
                return f"/dev/usb/lp{port}"
        
        return None
    
    def get_saved_printer(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        return self.storage.config.get('selected_printer')
    
    def send_pjl_command(self, command: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PJL –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—Ç–µ—Ä—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        
        Args:
            command: PJL –∫–æ–º–∞–Ω–¥–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.printer_name:
            print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é PJL –∫–æ–º–∞–Ω–¥—É
        full_command = f"\x1B%-12345X@PJL\r\n{command}\r\n@PJL EOJ\r\n\x1B%-12345X"
        
        print(f"‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        if self.system == "windows":
            return self._send_windows_command(full_command)
        elif self.system == "linux":
            return self._send_linux_command(full_command)
        else:
            print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {self.system} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return False
    
    def _send_windows_command(self, command: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ Windows"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.prn', delete=False) as f:
                f.write(command)
                temp_file = f.name
            
            try:
                # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                if self.printer_name:
                    cmd = f'copy /B "{temp_file}" "\\\\localhost\\{self.printer_name}"'
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
                    if result.returncode == 0:
                        print("‚úì –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
                        return True
                
                # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ USB –ø–æ—Ä—Ç
                if self.printer_port and 'USB' in self.printer_port:
                    for port in ['USB001', 'USB002', 'USB003']:
                        try:
                            cmd = f'copy /B "{temp_file}" "{port}"'
                            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
                            if result.returncode == 0:
                                print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç {port}")
                                return True
                        except:
                            continue
                
                # –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ PowerShell
                ps_script = f'''
$content = Get-Content -Path "{temp_file}" -Raw -Encoding Byte
$printerName = "{self.printer_name}"
try {{
    [System.IO.File]::WriteAllBytes("\\\\localhost\\$printerName", $content)
    "Success"
}} catch {{
    "Error: $($_.Exception.Message)"
}}
'''
                result = subprocess.run([
                    'powershell', '-ExecutionPolicy', 'Bypass', '-Command', ps_script
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0 and "Success" in result.stdout:
                    print("‚úì –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ PowerShell")
                    return True
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_file)
                except:
                    pass
            
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Windows: {e}")
            return False
    
    def _send_linux_command(self, command: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ Linux"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ lp
            if self.printer_name and 'CUPS' in str(self.printer_port):
                try:
                    proc = subprocess.Popen(['lp', '-d', self.printer_name, '-o', 'raw'], 
                                          stdin=subprocess.PIPE, 
                                          stdout=subprocess.PIPE, 
                                          stderr=subprocess.PIPE)
                    stdout, stderr = proc.communicate(command.encode('ascii'), timeout=30)
                    
                    if proc.returncode == 0:
                        print("‚úì –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ lp")
                        return True
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ lp: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            usb_devices = ['/dev/usb/lp0', '/dev/usb/lp1', '/dev/usb/lp2']
            for device in usb_devices:
                try:
                    if os.path.exists(device):
                        with open(device, 'wb') as f:
                            f.write(command.encode('ascii'))
                        print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {device}")
                        return True
                except Exception as e:
                    continue
            
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ Linux")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Linux: {e}")
            return False
    
    def get_scanner_counter(self) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
        """
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        real_counter = self._try_get_real_counter()
        if real_counter is not None:
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: {real_counter}")
            self.storage.set_counter(real_counter)
            return real_counter
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cached_counter = self.storage.get_counter()
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {cached_counter}")
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–≤—è–∑—å")
        
        return cached_counter
    
    def _try_get_real_counter(self) -> Optional[int]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        
        if self.system == "windows":
            return self._get_windows_counter()
        elif self.system == "linux":
            return self._get_linux_counter()
        
        return None
    
    def _get_windows_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤ Windows —á–µ—Ä–µ–∑ WMI"""
        try:
            print("   üñ•Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ WMI...")
            
            # –°–∫—Ä–∏–ø—Ç PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            ps_script = f'''
$printer = Get-WmiObject -Class Win32_Printer | Where-Object {{$_.Name -eq "{self.printer_name}"}} | Select-Object -First 1
if ($printer) {{
    try {{
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        $printer | Select-Object Name, PrinterStatus, JobCountSinceLastReset, PagesPrinted, TotalPagesPrinted | Format-List
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å
        $status = Get-WmiObject -Class Win32_PrinterStatus | Where-Object {{$_.Name -eq $printer.Name}}
        if ($status) {{
            $status | Select-Object * | Format-List
        }}
    }} catch {{
        "No detailed info available"
    }}
}}
'''
            
            result = subprocess.run([
                'powershell', '-Command', ps_script
            ], capture_output=True, text=True, timeout=20)
            
            if result.returncode == 0 and result.stdout:
                # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–≤–æ–¥–µ
                output = result.stdout
                print(f"   üìã WMI –æ—Ç–≤–µ—Ç: {output[:200]}...")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
                patterns = [
                    r'PagesPrinted\s*:\s*(\d+)',
                    r'TotalPagesPrinted\s*:\s*(\d+)',
                    r'JobCountSinceLastReset\s*:\s*(\d+)',
                    r':\s*(\d{2,6})'  # –õ—é–±–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, output, re.IGNORECASE)
                    for match in matches:
                        try:
                            value = int(match)
                            if 10 <= value <= 999999:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                                print(f"   ‚úì –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: {value}")
                                return value
                        except ValueError:
                            continue
                            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ WMI: {e}")
        
        return None
    
    def _get_linux_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤ Linux —á–µ—Ä–µ–∑ CUPS"""
        try:
            print("   üêß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ CUPS...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f"   üìã CUPS —Å—Ç–∞—Ç—É—Å: {result.stdout[:100]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result = subprocess.run(['lpstat', '-W', 'completed'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0 and result.stdout:
                # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                numbers = re.findall(r'\b(\d{2,6})\b', result.stdout)
                if numbers:
                    # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ
                    valid_numbers = [int(n) for n in numbers if 10 <= int(n) <= 999999]
                    if valid_numbers:
                        counter = max(valid_numbers)
                        print(f"   ‚úì –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: {counter}")
                        return counter
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ CUPS: {e}")
        
        return None
    
    def set_scanner_counter(self, count: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
        print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ {count}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PJL –∫–æ–º–∞–Ω–¥—ã
        commands = [
            f"@PJL SET SCANCOUNT={count}",
            f"@PJL SET SCANCOUNTER={count}",
            f"@PJL DEFAULT SCANCOUNT={count}",
            f"@PJL DEFAULT SCANCOUNTER={count}"
        ]
        
        success = False
        for command in commands:
            if self.send_pjl_command(command):
                success = True
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.storage.set_counter(count)
            print(f"‚úì –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {count}")
            print("üíæ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ {count}")
            return False
    
    def reset_scanner_counter(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ 0"""
        print("\nüîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...")
        return self.set_scanner_counter(0)
    
    def get_printer_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ"""
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ...")
        
        info = {
            "connection_type": "system_only",
            "printer_name": self.printer_name or "Unknown",
            "printer_port": self.printer_port or "Unknown",
            "system": self.system,
            "cached_counter": str(self.storage.get_counter())
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ PJL –∫–æ–º–∞–Ω–¥—ã
        info_commands = {
            "model": "@PJL INFO ID",
            "status": "@PJL INFO STATUS",
            "memory": "@PJL INFO MEMORY"
        }
        
        for key, command in info_commands.items():
            if self.send_pjl_command(command):
                info[f"{key}_sent"] = "‚úì"
            else:
                info[f"{key}_sent"] = "‚ùå"
        
        return info
    
    def get_command_history(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        return self.storage.get_history()
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ (–æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)"""
        print("‚úì –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def print_printer_list(printers: List[Dict[str, str]]):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"""
    if not printers:
        print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {len(printers)}")
    print("-" * 60)
    
    for i, printer in enumerate(printers, 1):
        print(f"{i}. {printer.get('name', 'Unknown')}")
        print(f"   –¢–∏–ø: {printer.get('type', 'Unknown')}")
        print(f"   –ü–æ—Ä—Ç: {printer.get('port', 'Unknown')}")
        if 'driver' in printer:
            print(f"   –î—Ä–∞–π–≤–µ—Ä: {printer['driver']}")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="HP LaserJet Pro 400 Scanner Counter (–¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python hp_scanner_counter_system.py --list
  python hp_scanner_counter_system.py --get
  python hp_scanner_counter_system.py --set 1000
  python hp_scanner_counter_system.py --reset
  python hp_scanner_counter_system.py --info
  python hp_scanner_counter_system.py --history
  
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞:
  python hp_scanner_counter_system.py --interactive --get
  python hp_scanner_counter_system.py -i --set 1000
  
–£–∫–∞–∑–∞–Ω–∏–µ USB –ø–æ—Ä—Ç–∞:
  python hp_scanner_counter_system.py --usb-port USB001 --get
  python hp_scanner_counter_system.py --usb-port 1 --get  (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ USB001)
        """
    )
    
    parser.add_argument("--timeout", type=int, default=10, help="–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
    parser.add_argument("--history", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥")
    parser.add_argument("--interactive", "-i", action="store_true", 
                       help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
    parser.add_argument("--usb-port", "-p", type=str, metavar="PORT",
                       help="–£–∫–∞–∑–∞—Ç—å USB –ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: USB001, 1, /dev/usb/lp0)")
    parser.add_argument("--select", action="store_true", 
                       help="–¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--use-saved", action="store_true",
                       help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞")
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--get", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--set", type=int, metavar="COUNT", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ 0")
    group.add_argument("--info", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ")
    
    args = parser.parse_args()
    
    print("üñ®Ô∏è  HP LaserJet Pro 400 Scanner Counter (–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã)")
    print("=" * 65)
    print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
    printer = HPPrinterSystem(timeout=args.timeout)
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        if args.list:
            printers = printer.find_hp_printers()
            print_printer_list(printers)
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
        if args.history:
            history = printer.get_command_history()
            if history:
                print("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:")
                print("-" * 50)
                for entry in history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                    timestamp = entry.get('timestamp', 'Unknown')
                    action = entry.get('action', 'Unknown')
                    print(f"üìÖ {timestamp}")
                    print(f"   {action}")
                    print()
            else:
                print("üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        saved_printer = None
        usb_port = None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º USB –ø–æ—Ä—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.usb_port:
            usb_port = printer._normalize_usb_port(args.usb_port)
            if not usb_port:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USB –ø–æ—Ä—Ç–∞: {args.usb_port}")
                sys.exit(1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.use_saved:
            saved_printer = printer.get_saved_printer()
            if saved_printer:
                print(f"üìÅ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä: {saved_printer.get('name')} ({saved_printer.get('port')})")
            else:
                print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫")
        
        # –¢–æ–ª—å–∫–æ –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        if args.select:
            print("üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
            success = printer.connect(saved_printer, interactive=True, usb_port=usb_port)
            if success:
                print("‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
                sys.exit(1)
            return
        
        # –û–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        interactive_mode = args.interactive and not usb_port  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –µ—Å–ª–∏ –ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
        
        success = printer.connect(
            printer_info=saved_printer if args.use_saved else None,
            interactive=interactive_mode,
            usb_port=usb_port
        )
        
        if not success:
            print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --usb-port PORT –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if args.get:
            counter = printer.get_scanner_counter()
            print(f"\nüìä –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter}")
            
        elif args.set is not None:
            if args.set < 0:
                print("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                sys.exit(1)
            
            if printer.set_scanner_counter(args.set):
                print(f"\n‚úÖ –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args.set}")
            else:
                print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ {args.set}")
                sys.exit(1)
                
        elif args.reset:
            if printer.reset_scanner_counter():
                print("\n‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ 0")
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
                sys.exit(1)
                
        elif args.info:
            info = printer.get_printer_info()
            print("\n" + "="*50)
            print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–ò–ù–¢–ï–†–ï")
            print("="*50)
            for key, value in info.items():
                print(f"{key.upper()}: {value}")
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
            counter = printer.get_scanner_counter()
            print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter}")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        printer.disconnect()


if __name__ == "__main__":
    main()
