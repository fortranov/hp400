#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ HP LaserJet MFP M425 USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ M425 –ø—Ä–∏–Ω—Ç–µ—Ä–∞
"""

import subprocess
import platform
import sys
import os
import re
from typing import List, Dict


def print_section(title: str):
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'=' * 60}")
    print(f"  {title}")
    print('=' * 60)


def run_command(command: List[str], description: str = "", timeout: int = 15) -> tuple:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîç {description}")
    print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    print("-" * 40)
    
    try:
        result = subprocess.run(command, capture_output=True, text=True, timeout=timeout)
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Timeout"
    except Exception as e:
        return -2, "", str(e)


def diagnose_windows_m425():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ M425 –≤ Windows"""
    print_section("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê M425 –í WINDOWS")
    
    # 1. –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    print("\n1Ô∏è‚É£ –ë–ê–ó–û–í–´–ô –ü–û–ò–°–ö –ü–†–ò–ù–¢–ï–†–û–í")
    code, stdout, stderr = run_command([
        'wmic', 'printer', 'get', 'Name,PortName,DriverName,Status'
    ], "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
    
    if code == 0:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        lines = stdout.strip().split('\n')
        found_hp = False
        for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if line.strip():
                print(f"   üìÑ {line.strip()}")
                if any(term in line.upper() for term in ['HP', 'HEWLETT', 'LASER', 'M425', 'MFP']):
                    found_hp = True
                    print(f"      ‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π HP –ø—Ä–∏–Ω—Ç–µ—Ä!")
        
        if not found_hp:
            print("   ‚ùå HP –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–æ–≤–æ–º –ø–æ–∏—Å–∫–µ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    # 2. –ü–æ–∏—Å–∫ M425 –ø–æ –∏–º–µ–Ω–∏
    print("\n2Ô∏è‚É£ –ü–û–ò–°–ö M425 –ü–û –ò–ú–ï–ù–ò")
    m425_queries = [
        'Name like "%M425%"',
        'Name like "%400%" and Name like "%MFP%"',
        'Name like "%LaserJet%" and Name like "%400%"',
        'Name like "%HP%" and Name like "%MFP%"'
    ]
    
    for i, query in enumerate(m425_queries, 1):
        code, stdout, stderr = run_command([
            'wmic', 'printer', 'where', query, 'get', 'Name,PortName,DriverName'
        ], f"–ü–æ–∏—Å–∫ {i}: {query}")
        
        if code == 0 and stdout.strip():
            lines = stdout.strip().split('\n')[1:]
            for line in lines:
                if line.strip():
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {line.strip()}")
        else:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ –¥—Ä–∞–π–≤–µ—Ä—É
    print("\n3Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –î–†–ê–ô–í–ï–†–£")
    driver_queries = [
        'DriverName like "%M425%"',
        'DriverName like "%400%"',
        'DriverName like "%MFP%"',
        'DriverName like "%LaserJet%"'
    ]
    
    for i, query in enumerate(driver_queries, 1):
        code, stdout, stderr = run_command([
            'wmic', 'printer', 'where', query, 'get', 'Name,DriverName'
        ], f"–ü–æ–∏—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞ {i}: {query}")
        
        if code == 0 and stdout.strip():
            lines = stdout.strip().split('\n')[1:]
            for line in lines:
                if line.strip():
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –¥—Ä–∞–π–≤–µ—Ä: {line.strip()}")
    
    # 4. –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    print("\n4Ô∏è‚É£ –ü–û–ò–°–ö USB –ü–†–ò–ù–¢–ï–†–û–í")
    usb_queries = [
        'PortName like "USB%"',
        'PortName="USB001"',
        'PortName="USB002"',
        'PortName="USB003"'
    ]
    
    for i, query in enumerate(usb_queries, 1):
        code, stdout, stderr = run_command([
            'wmic', 'printer', 'where', query, 'get', 'Name,PortName'
        ], f"USB –ø–æ–∏—Å–∫ {i}: {query}")
        
        if code == 0 and stdout.strip():
            lines = stdout.strip().split('\n')[1:]
            for line in lines:
                if line.strip():
                    print(f"   ‚úÖ USB –ø—Ä–∏–Ω—Ç–µ—Ä: {line.strip()}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ USB –ø–æ—Ä—Ç–æ–≤
    print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê USB –ü–û–†–¢–û–í")
    for port in ['USB001', 'USB002', 'USB003', 'USB004']:
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_Printer', 'where', f'PortName="{port}"', 'get', 'Name'
        ], f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {port}")
        
        if code == 0 and stdout.strip():
            lines = stdout.strip().split('\n')[1:]
            for line in lines:
                if line.strip():
                    print(f"   ‚úÖ –ü–æ—Ä—Ç {port}: {line.strip()}")
        else:
            print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –ø—É—Å—Ç–æ–π")
    
    # 6. PowerShell –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\n6Ô∏è‚É£ POWERSHELL –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    ps_script = '''
Write-Output "=== –ü–æ–∏—Å–∫ HP –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ ==="
Get-WmiObject -Class Win32_Printer | Where-Object {
    $_.Name -like "*HP*" -or 
    $_.Name -like "*Hewlett*" -or
    $_.DriverName -like "*HP*" -or
    $_.DriverName -like "*M425*"
} | Select-Object Name, PortName, DriverName, Status | Format-Table -AutoSize

Write-Output "=== –ü–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ==="
Get-WmiObject -Class Win32_PnPEntity | Where-Object {
    $_.Name -like "*HP*" -and $_.Name -like "*USB*"
} | Select-Object Name, DeviceID, Status | Format-Table -AutoSize

Write-Output "=== –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ M425 ==="
Get-WmiObject -Class Win32_Printer | Where-Object {
    $_.Name -like "*M425*" -or
    $_.Name -like "*400*MFP*" -or
    $_.DriverName -like "*M425*"
} | Select-Object * | Format-List
'''
    
    code, stdout, stderr = run_command([
        'powershell', '-ExecutionPolicy', 'Bypass', '-Command', ps_script
    ], "PowerShell –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    if code == 0:
        print("‚úÖ PowerShell —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(stdout)
    else:
        print(f"‚ùå PowerShell –æ—à–∏–±–∫–∞: {stderr}")


def diagnose_linux_m425():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ M425 –≤ Linux"""
    print_section("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê M425 –í LINUX")
    
    # 1. lsusb –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\n1Ô∏è‚É£ USB –£–°–¢–†–û–ô–°–¢–í–ê")
    code, stdout, stderr = run_command(['lsusb'], "–°–ø–∏—Å–æ–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    
    if code == 0:
        print("‚úÖ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for line in stdout.split('\n'):
            if line.strip():
                print(f"   üìÑ {line}")
                if any(term.lower() in line.lower() for term in ['hp', 'hewlett', 'laser', 'm425']):
                    print(f"      ‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π HP!")
    
    # 2. CUPS –ø—Ä–∏–Ω—Ç–µ—Ä—ã
    print("\n2Ô∏è‚É£ CUPS –ü–†–ò–ù–¢–ï–†–´")
    code, stdout, stderr = run_command(['lpstat', '-p'], "CUPS –ø—Ä–∏–Ω—Ç–µ—Ä—ã")
    
    if code == 0:
        print("‚úÖ CUPS –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
        for line in stdout.split('\n'):
            if line.strip():
                print(f"   üìÑ {line}")
    
    # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è CUPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\n3Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–ê–Ø CUPS –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    code, stdout, stderr = run_command(['lpstat', '-l', '-p'], "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è CUPS")
    
    if code == 0:
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è CUPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(stdout[:1000] + "..." if len(stdout) > 1000 else stdout)
    
    # 4. USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    print("\n4Ô∏è‚É£ USB –ü–†–ò–ù–¢–ï–†–´")
    for i in range(4):
        device = f'/dev/usb/lp{i}'
        if os.path.exists(device):
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {device}")
            try:
                stat = os.stat(device)
                print(f"      –ü—Ä–∞–≤–∞: {oct(stat.st_mode)[-3:]}")
            except:
                pass
        else:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {device}")


def diagnose_usb_hardware():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ USB –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    print_section("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USB –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø")
    
    system = platform.system().lower()
    
    if system == "windows":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ USB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        print("\n1Ô∏è‚É£ USB –ö–û–ù–¢–†–û–õ–õ–ï–†–´")
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_USBController', 'get', 'Name,Status'
        ], "USB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã")
        
        if code == 0:
            for line in stdout.strip().split('\n')[1:]:
                if line.strip():
                    print(f"   üìÑ {line.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ USB —Ö–∞–±–æ–≤
        print("\n2Ô∏è‚É£ USB –•–ê–ë–´")
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_USBHub', 'get', 'Name,Status'
        ], "USB —Ö–∞–±—ã")
        
        if code == 0:
            for line in stdout.strip().split('\n')[1:]:
                if line.strip():
                    print(f"   üìÑ {line.strip()}")
        
        # PnP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HP
        print("\n3Ô∏è‚É£ HP PNP –£–°–¢–†–û–ô–°–¢–í–ê")
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_PnPEntity', 'where', 'Name like "%HP%" or Name like "%Hewlett%"',
            'get', 'Name,Status,DeviceID'
        ], "HP PnP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        if code == 0:
            for line in stdout.strip().split('\n')[1:]:
                if line.strip():
                    print(f"   üìÑ {line.strip()}")
    
    elif system == "linux":
        # dmesg –¥–ª—è USB
        print("\n1Ô∏è‚É£ DMESG USB –°–û–ë–´–¢–ò–Ø")
        code, stdout, stderr = run_command([
            'dmesg', '|', 'grep', '-i', 'usb.*hp'
        ], "USB —Å–æ–±—ã—Ç–∏—è HP", timeout=10)
        
        if code == 0 and stdout:
            for line in stdout.split('\n')[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                if line.strip():
                    print(f"   üìÑ {line}")


def check_drivers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤"""
    print_section("–ü–†–û–í–ï–†–ö–ê –î–†–ê–ô–í–ï–†–û–í")
    
    system = platform.system().lower()
    
    if system == "windows":
        print("\n1Ô∏è‚É£ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –î–†–ê–ô–í–ï–†–´ HP")
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_SystemDriver', 'where', 'Name like "%HP%" or Name like "%hewlett%"',
            'get', 'Name,State,Status'
        ], "–°–∏—Å—Ç–µ–º–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã HP")
        
        if code == 0:
            for line in stdout.strip().split('\n')[1:]:
                if line.strip():
                    print(f"   üìÑ {line.strip()}")
        
        # –î—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        print("\n2Ô∏è‚É£ –î–†–ê–ô–í–ï–†–´ –ü–†–ò–ù–¢–ï–†–û–í")
        code, stdout, stderr = run_command([
            'wmic', 'path', 'Win32_PrinterDriver', 'where', 'Name like "%M425%" or Name like "%400%" or Name like "%MFP%"',
            'get', 'Name,Version'
        ], "–î—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
        
        if code == 0:
            for line in stdout.strip().split('\n')[1:]:
                if line.strip():
                    print(f"   üìÑ {line.strip()}")


def suggest_solutions():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"""
    print_section("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ")
    
    print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ò –†–ï–®–ï–ù–ò–Ø:")
    print("\n1Ô∏è‚É£ –ü–†–ò–ù–¢–ï–† –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù –í –°–ò–°–¢–ï–ú–ï:")
    print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä M425 —Å —Å–∞–π—Ç–∞ HP")
    print("   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    
    print("\n2Ô∏è‚É£ –ü–†–ò–ù–¢–ï–† –£–°–¢–ê–ù–û–í–õ–ï–ù, –ù–û –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ M425 –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä")
    print("   ‚Ä¢ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MFP —Ñ—É–Ω–∫—Ü–∏–π")
    
    print("\n3Ô∏è‚É£ USB –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π USB –∫–∞–±–µ–ª—å")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π USB –ø–æ—Ä—Ç")
    print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ M425 –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤")
    
    print("\n4Ô∏è‚É£ –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê:")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")
    
    print("\n5Ô∏è‚É£ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞:")
    print("     python hp_m425_scanner_counter.py --usb-port USB001 --info")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã: USB001, USB002, USB003")
    
    print("\n6Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç:")
    print("     wmic printer where PortName=\"USB001\" get Name")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ HP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    print("     wmic printer where \"Name like '%HP%'\" get Name,PortName")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ HP LaserJet MFP M425 USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 60)
    
    system = platform.system().lower()
    print(f"üñ•Ô∏è  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print(f"üêç Python: {platform.python_version()}")
    
    if system == "windows":
        diagnose_windows_m425()
    elif system == "linux":
        diagnose_linux_m425()
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {system}")
        return
    
    diagnose_usb_hardware()
    check_drivers()
    suggest_solutions()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    
    print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ")
    print("2. –ï—Å–ª–∏ M425 –Ω–∞–π–¥–µ–Ω - –∑–∞–ø–æ–º–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∏–º—è –∏ –ø–æ—Ä—Ç")
    print("3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞")
    print("5. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)
