#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É HP LaserJet Pro 400
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ USB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ PJL –∫–æ–º–∞–Ω–¥
"""

import sys
import platform
import subprocess
from typing import List, Dict

try:
    import usb.core
    import usb.util
    USB_AVAILABLE = True
except ImportError:
    USB_AVAILABLE = False


def test_system_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üñ•Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"   –û–°: {platform.system()} {platform.release()}")
    print(f"   Python: {platform.python_version()}")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"   PyUSB –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if USB_AVAILABLE else '‚ùå –ù–µ—Ç'}")
    print()


def test_usb_devices() -> List[Dict]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üîç –ü–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    devices = []
    
    if not USB_AVAILABLE:
        print("   ‚ö†Ô∏è  PyUSB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
        return test_system_usb()
    
    try:
        # HP Vendor ID
        HP_VENDOR_ID = 0x03f0
        
        print(f"   üîé –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ HP (Vendor ID: 0x{HP_VENDOR_ID:04x})")
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        all_devices = list(usb.core.find(find_all=True))
        print(f"   üìä –í—Å–µ–≥–æ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(all_devices)}")
        
        # –ü–æ–∏—Å–∫ HP —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        hp_devices = list(usb.core.find(find_all=True, idVendor=HP_VENDOR_ID))
        print(f"   üìä HP —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(hp_devices)}")
        
        for device in hp_devices:
            try:
                device_info = {
                    'vendor_id': device.idVendor,
                    'product_id': device.idProduct,
                    'bus': device.bus,
                    'address': device.address
                }
                
                try:
                    device_info['manufacturer'] = usb.util.get_string(device, device.iManufacturer) if device.iManufacturer else "Unknown"
                    device_info['product'] = usb.util.get_string(device, device.iProduct) if device.iProduct else "Unknown"
                except:
                    device_info['manufacturer'] = "Unknown"
                    device_info['product'] = "Unknown"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                device_info['interfaces'] = []
                try:
                    for cfg in device:
                        for intf in cfg:
                            device_info['interfaces'].append({
                                'class': intf.bInterfaceClass,
                                'subclass': intf.bInterfaceSubClass,
                                'protocol': intf.bInterfaceProtocol,
                                'is_printer': intf.bInterfaceClass == 7
                            })
                except:
                    pass
                
                devices.append(device_info)
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
                continue
        
        return devices
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []


def test_system_usb() -> List[Dict]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    devices = []
    system = platform.system().lower()
    
    try:
        if system == "windows":
            print("   üñ•Ô∏è  –ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Windows...")
            
            # –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ wmic
            result = subprocess.run([
                'wmic', 'printer', 'where', 'PortName like "USB%"', 
                'get', 'Name,PortName,DriverName'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines:
                    if line.strip() and ('HP' in line.upper() or 'HEWLETT' in line.upper()):
                        parts = line.strip().split()
                        if len(parts) >= 2:
                            devices.append({
                                'name': ' '.join(parts[:-2]) if len(parts) > 2 else parts[0],
                                'port': parts[-2] if len(parts) > 1 else 'USB',
                                'driver': parts[-1] if len(parts) > 2 else 'Unknown',
                                'system_method': True
                            })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —á–µ—Ä–µ–∑ USB –ø–æ—Ä—Ç—ã
            print("   üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ USB –ø–æ—Ä—Ç–æ–≤...")
            for port in ['USB001', 'USB002', 'USB003']:
                try:
                    result = subprocess.run([
                        'wmic', 'printer', 'where', f'PortName="{port}"', 'get', 'Name'
                    ], capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        lines = result.stdout.strip().split('\n')[1:]
                        for line in lines:
                            if line.strip():
                                print(f"      ‚úì –ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ {port}: {line.strip()}")
                except:
                    continue
                    
        elif system == "linux":
            print("   üêß –ü–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –≤ Linux...")
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ lsusb
            try:
                result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if 'hewlett-packard' in line.lower() or 'hp' in line.lower():
                            devices.append({
                                'name': line.strip(),
                                'port': 'USB',
                                'system_method': True
                            })
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ /dev/usb/lp*
            print("   üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ /dev/usb/lp* —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            import os
            for i in range(4):
                device_path = f'/dev/usb/lp{i}'
                if os.path.exists(device_path):
                    stat = os.stat(device_path)
                    print(f"      ‚úì {device_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–∞–≤–∞: {oct(stat.st_mode)[-3:]})")
                else:
                    print(f"      ‚ùå {device_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cups –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
            try:
                result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    print("   üñ®Ô∏è  CUPS –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
                    for line in result.stdout.split('\n'):
                        if line.strip():
                            print(f"      üìÑ {line.strip()}")
            except:
                print("   ‚ö†Ô∏è  CUPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
    
    return devices


def print_device_details(devices: List[Dict]):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
    if not devices:
        print("‚ùå HP –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ HP —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
    print("-" * 60)
    
    for i, device in enumerate(devices, 1):
        print(f"\n{i}. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:")
        
        if 'system_method' in device:
            print(f"   üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {device.get('name', 'Unknown')}")
            print(f"   üîå –ü–æ—Ä—Ç: {device.get('port', 'Unknown')}")
            if 'driver' in device:
                print(f"   üíø –î—Ä–∞–π–≤–µ—Ä: {device['driver']}")
            print("   üîß –ú–µ—Ç–æ–¥: –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        else:
            print(f"   üìÑ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {device.get('manufacturer', 'Unknown')}")
            print(f"   üì¶ –ü—Ä–æ–¥—É–∫—Ç: {device.get('product', 'Unknown')}")
            print(f"   üî¢ VID:PID: 0x{device['vendor_id']:04x}:0x{device['product_id']:04x}")
            print(f"   üöå USB: Bus {device['bus']} Device {device['address']}")
            print("   üîß –ú–µ—Ç–æ–¥: –ü—Ä—è–º–æ–π USB –¥–æ—Å—Ç—É–ø")
            
            if device.get('interfaces'):
                print("   üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
                for intf in device['interfaces']:
                    class_name = "–ü—Ä–∏–Ω—Ç–µ—Ä" if intf['is_printer'] else f"–ö–ª–∞—Å—Å {intf['class']}"
                    print(f"      ‚Ä¢ {class_name} (–ö–ª–∞—Å—Å: {intf['class']}, –ü–æ–¥–∫–ª–∞—Å—Å: {intf['subclass']})")


def test_permissions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    system = platform.system().lower()
    
    if system == "windows":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin()
            if is_admin:
                print("   ‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            else:
                print("   ‚ö†Ô∏è  –ù–ï –∑–∞–ø—É—â–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                print("   üí° –î–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å USB –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        except:
            print("   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
    elif system == "linux":
        import os
        import grp
        
        user = os.getenv('USER', 'unknown')
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        
        try:
            groups = [g.gr_name for g in grp.getgrall() if user in g.gr_mem]
            groups.append(grp.getgrgid(os.getgid()).gr_name)
            print(f"   üë• –ì—Ä—É–ø–ø—ã: {', '.join(set(groups))}")
            
            if 'lp' in groups:
                print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ 'lp' - –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º –µ—Å—Ç—å")
            else:
                print("   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –≥—Ä—É–ø–ø–µ 'lp'")
                print("   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -a -G lp $USER")
                
            if 'dialout' in groups:
                print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ 'dialout' - –¥–æ—Å—Ç—É–ø –∫ USB –µ—Å—Ç—å")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø: {e}")


def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pyusb
    if USB_AVAILABLE:
        try:
            print(f"   ‚úÖ PyUSB: {usb.__version__}")
        except:
            print("   ‚úÖ PyUSB: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)")
    else:
        print("   ‚ùå PyUSB: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyusb")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    system = platform.system().lower()
    
    if system == "windows":
        utils = ['wmic']
    elif system == "linux":
        utils = ['lsusb', 'lpstat']
    else:
        utils = []
    
    for util in utils:
        try:
            result = subprocess.run([util, '--help'], 
                                  capture_output=True, timeout=5)
            print(f"   ‚úÖ {util}: –¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            try:
                result = subprocess.run([util], capture_output=True, timeout=5)
                print(f"   ‚úÖ {util}: –¥–æ—Å—Ç—É–ø–µ–Ω")
            except:
                print(f"   ‚ùå {util}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ HP LaserJet Pro 400 - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 65)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    test_system_info()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    test_dependencies()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    test_permissions()
    
    # –ü–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    print("\n" + "=" * 65)
    devices = test_usb_devices()
    print_device_details(devices)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 65)
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if not devices:
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ USB –∫–∞–±–µ–ª—å")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π USB –ø–æ—Ä—Ç")
        print("   4. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
        
        if not USB_AVAILABLE:
            print("   5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyusb: pip install pyusb")
            
    else:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(devices)} HP —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print("   üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hp_scanner_counter_usb.py")
        
        if not USB_AVAILABLE:
            print("   üìà –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyusb")
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   python hp_scanner_counter_usb.py --list")
    print("   python hp_scanner_counter_usb.py --get")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)
