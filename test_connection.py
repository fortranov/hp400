#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É HP LaserJet Pro 400
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –±–∞–∑–æ–≤—ã—Ö PJL –∫–æ–º–∞–Ω–¥
"""

import socket
import sys
import time


def test_printer_connection(ip_address: str, port: int = 9100, timeout: int = 5):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ PJL –∫–æ–º–∞–Ω–¥—ã
    
    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        port: –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    Returns:
        True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip_address}:{port}")
    print("-" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        
        result = sock.connect_ex((ip_address, port))
        if result == 0:
            print("   ‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("   ‚ùå TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            sock.close()
            return False
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ PJL –∫–æ–º–∞–Ω–¥—ã INFO ID
        print("2Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤–∫–∞ PJL –∫–æ–º–∞–Ω–¥—ã INFO ID...")
        pjl_command = "\x1B%-12345X@PJL\r\n@PJL INFO ID\r\n@PJL EOJ\r\n\x1B%-12345X"
        
        sock.send(pjl_command.encode('ascii'))
        print("   üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        time.sleep(2)
        response = ""
        try:
            while True:
                data = sock.recv(1024).decode('ascii', errors='ignore')
                if not data:
                    break
                response += data
                time.sleep(0.1)
        except socket.timeout:
            pass
        
        if response.strip():
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞:")
            print(f"      üìã {response.strip()}")
        else:
            print("   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—á–µ—Ç—á–∏–∫–∞
        print("3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —Å—á–µ—Ç—á–∏–∫–∞...")
        counter_commands = [
            "@PJL INQUIRE SCANCOUNT",
            "@PJL INFO SCANCOUNT"
        ]
        
        counter_found = False
        for cmd in counter_commands:
            full_cmd = f"\x1B%-12345X@PJL\r\n{cmd}\r\n@PJL EOJ\r\n\x1B%-12345X"
            sock.send(full_cmd.encode('ascii'))
            time.sleep(1)
            
            try:
                response = sock.recv(1024).decode('ascii', errors='ignore')
                if response and "=" in response:
                    print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ {cmd} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    print(f"      üìä –û—Ç–≤–µ—Ç: {response.strip()}")
                    counter_found = True
                    break
            except:
                continue
        
        if not counter_found:
            print("   ‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥—ã —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥)")
        
        sock.close()
        print("\n‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except socket.timeout:
        print(f"   ‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({timeout}s)")
        return False
    except socket.error as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üñ®Ô∏è  HP LaserJet Pro 400 - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 50)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_connection.py <IP_–ø—Ä–∏–Ω—Ç–µ—Ä–∞> [–ø–æ—Ä—Ç] [—Ç–∞–π–º–∞—É—Ç]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_connection.py 192.168.1.100")
        print("  python test_connection.py 192.168.1.100 9100")
        print("  python test_connection.py 192.168.1.100 9100 10")
        sys.exit(1)
    
    ip_address = sys.argv[1]
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 9100
    timeout = int(sys.argv[3]) if len(sys.argv) > 3 else 5
    
    try:
        success = test_printer_connection(ip_address, port, timeout)
        
        if success:
            print(f"\nüéâ –ü—Ä–∏–Ω—Ç–µ—Ä {ip_address} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("üí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç hp_scanner_counter.py")
        else:
            print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ {ip_address}")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω –∏ –≤ —Å–µ—Ç–∏")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞")
            print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9101 –∏–ª–∏ 9102)")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
