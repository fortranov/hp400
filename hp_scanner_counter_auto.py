#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HP LaserJet Pro 400 Scanner Counter Control (Universal Version)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (USB –∏–ª–∏ —Å–µ—Ç—å) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
"""

import argparse
import sys
import time
import socket
import subprocess
import platform
from typing import Optional, List, Dict, Union

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from hp_scanner_counter import HPPrinterPJL
    NETWORK_AVAILABLE = True
except ImportError:
    NETWORK_AVAILABLE = False

try:
    from hp_scanner_counter_usb import HPPrinterUSB
    USB_MODULE_AVAILABLE = True
except ImportError:
    USB_MODULE_AVAILABLE = False

try:
    import usb.core
    USB_AVAILABLE = True
except ImportError:
    USB_AVAILABLE = False


class HPPrinterAuto:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ –ª—é–±–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    
    def __init__(self, ip_address: Optional[str] = None, timeout: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            ip_address: IP –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            timeout: –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        self.ip_address = ip_address
        self.timeout = timeout
        self.connection_type = None
        self.printer = None
        
    def detect_connection_type(self) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Returns:
            'network', 'usb' –∏–ª–∏ 'none'
        """
        print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω IP
        if self.ip_address:
            if self._test_network_connection():
                print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                return 'network'
            else:
                print("‚ùå –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if self._test_usb_connection():
            print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return 'usb'
        else:
            print("‚ùå USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 'none'
    
    def _test_network_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not self.ip_address or not NETWORK_AVAILABLE:
            return False
            
        try:
            print(f"   üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.ip_address}...")
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((self.ip_address, 9100))
            sock.close()
            return result == 0
        except:
            return False
    
    def _test_usb_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not USB_MODULE_AVAILABLE:
            return False
            
        try:
            print("   üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            usb_printer = HPPrinterUSB(timeout=3)
            printers = usb_printer.find_hp_printers()
            return len(printers) > 0
        except:
            return False
    
    def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.connection_type:
            self.connection_type = self.detect_connection_type()
        
        if self.connection_type == 'network':
            return self._connect_network()
        elif self.connection_type == 'usb':
            return self._connect_usb()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return False
    
    def _connect_network(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ç—å"""
        if not NETWORK_AVAILABLE:
            print("‚ùå –ú–æ–¥—É–ª—å —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ç—å...")
        self.printer = HPPrinterPJL(self.ip_address, timeout=self.timeout)
        return self.printer.connect()
    
    def _connect_usb(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USB"""
        if not USB_MODULE_AVAILABLE:
            print("‚ùå –ú–æ–¥—É–ª—å USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USB...")
        self.printer = HPPrinterUSB(timeout=self.timeout)
        return self.printer.connect()
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        if self.printer:
            self.printer.disconnect()
            self.printer = None
    
    def get_scanner_counter(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
        if not self.printer:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return None
        return self.printer.get_scanner_counter()
    
    def set_scanner_counter(self, count: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
        if not self.printer:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return False
        return self.printer.set_scanner_counter(count)
    
    def reset_scanner_counter(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ 0"""
        if not self.printer:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return False
        return self.printer.reset_scanner_counter()
    
    def get_printer_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ"""
        if not self.printer:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return {}
        return self.printer.get_printer_info()


def scan_for_printers() -> Dict[str, List]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã"""
    result = {
        'network': [],
        'usb': []
    }
    
    print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
    print("-" * 50)
    
    # –ü–æ–∏—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏)
    print("üåê –ü–æ–∏—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥—Å–µ—Ç—å
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        subnet = '.'.join(local_ip.split('.')[:-1]) + '.'
        
        print(f"   üì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏ {subnet}0/24...")
        
        # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        common_ips = [f"{subnet}{i}" for i in [100, 101, 102, 110, 150, 200, 250]]
        
        for ip in common_ips:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                if sock.connect_ex((ip, 9100)) == 0:
                    result['network'].append(ip)
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ç–µ–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä: {ip}")
                sock.close()
            except:
                continue
                
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    
    # –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    print("\nüîå –ü–æ–∏—Å–∫ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...")
    if USB_MODULE_AVAILABLE:
        try:
            usb_printer = HPPrinterUSB()
            usb_devices = usb_printer.find_hp_printers()
            result['usb'] = usb_devices
            
            for device in usb_devices:
                name = device.get('product', device.get('name', 'Unknown'))
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω USB –ø—Ä–∏–Ω—Ç–µ—Ä: {name}")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ USB –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
    else:
        print("   ‚ö†Ô∏è  –ú–æ–¥—É–ª—å USB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return result


def print_scan_results(results: Dict[str, List]):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    total_found = len(results['network']) + len(results['usb'])
    
    if total_found == 0:
        print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (USB –∫–∞–±–µ–ª—å –∏–ª–∏ —Å–µ—Ç—å)")
        print("   ‚Ä¢ –î–ª—è USB: –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   ‚Ä¢ –î–ª—è —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {total_found}")
    
    if results['network']:
        print(f"\nüåê –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã ({len(results['network'])}):")
        for i, ip in enumerate(results['network'], 1):
            print(f"   {i}. {ip}")
    
    if results['usb']:
        print(f"\nüîå USB –ø—Ä–∏–Ω—Ç–µ—Ä—ã ({len(results['usb'])}):")
        for i, device in enumerate(results['usb'], 1):
            name = device.get('product', device.get('name', 'Unknown'))
            print(f"   {i}. {name}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–º HP LaserJet Pro 400 (–∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python hp_scanner_counter_auto.py --scan
  python hp_scanner_counter_auto.py --get
  python hp_scanner_counter_auto.py --get --ip 192.168.1.100
  python hp_scanner_counter_auto.py --set 1000
  python hp_scanner_counter_auto.py --reset
        """
    )
    
    parser.add_argument("--ip", help="IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)")
    parser.add_argument("--timeout", type=int, default=10, help="–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--scan", action="store_true", help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã")
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--get", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--set", type=int, metavar="COUNT", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ 0")
    group.add_argument("--info", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ")
    
    args = parser.parse_args()
    
    print("üñ®Ô∏è  HP LaserJet Pro 400 Scanner Counter Control (Universal)")
    print("=" * 65)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
    if not NETWORK_AVAILABLE and not USB_MODULE_AVAILABLE:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã hp_scanner_counter.py –∏ hp_scanner_counter_usb.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    methods = []
    if NETWORK_AVAILABLE:
        methods.append("–°–µ—Ç—å")
    if USB_MODULE_AVAILABLE:
        methods.append("USB")
    
    print(f"üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {', '.join(methods)}")
    if USB_AVAILABLE:
        print("üîå PyUSB –¥–æ—Å—Ç—É–ø–µ–Ω - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ USB")
    elif USB_MODULE_AVAILABLE:
        print("üîå USB –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    print()
    
    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    if args.scan or not any([args.get, args.set is not None, args.reset, args.info]):
        results = scan_for_printers()
        print_scan_results(results)
        
        if args.scan:
            return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º
        total_found = len(results['network']) + len(results['usb'])
        if total_found == 0:
            sys.exit(1)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if results['network'] and not results['usb'] and not args.ip:
            args.ip = results['network'][0]
            print(f"\nüí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Å–µ—Ç–µ–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä: {args.ip}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä
    printer = HPPrinterAuto(args.ip, args.timeout)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if not printer.connect():
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if args.get:
            counter = printer.get_scanner_counter()
            if counter is not None:
                print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter}")
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
                sys.exit(1)
                
        elif args.set is not None:
            if args.set < 0:
                print("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                sys.exit(1)
            
            if printer.set_scanner_counter(args.set):
                print(f"\n‚úÖ –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args.set}")
            else:
                print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ {args.set}")
                sys.exit(1)
                
        elif args.reset:
            if printer.reset_scanner_counter():
                print("\n‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ 0")
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
                sys.exit(1)
                
        elif args.info:
            info = printer.get_printer_info()
            if info:
                print("\n" + "="*50)
                print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–ò–ù–¢–ï–†–ï")
                print("="*50)
                print(f"üîó –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {printer.connection_type.upper()}")
                if printer.connection_type == 'network':
                    print(f"üåê IP –∞–¥—Ä–µ—Å: {printer.ip_address}")
                print()
                for key, value in info.items():
                    print(f"{key.upper()}: {value}")
            else:
                print("\n‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        printer.disconnect()


if __name__ == "__main__":
    main()
