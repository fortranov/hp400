#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HP LaserJet Pro 400 Scanner Counter Control Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä–∞ HP LaserJet Pro 400 —á–µ—Ä–µ–∑ PJL
"""

import socket
import argparse
import sys
import time
from typing import Optional, Tuple


class HPPrinterPJL:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º HP —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª PJL"""
    
    def __init__(self, ip_address: str, port: int = 9100, timeout: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
        
        Args:
            ip_address: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            port: –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 9100 –¥–ª—è HP LaserJet)
            timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.ip_address = ip_address
        self.port = port
        self.timeout = timeout
        self.socket = None
    
    def connect(self) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(self.timeout)
            self.socket.connect((self.ip_address, self.port))
            print(f"‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º {self.ip_address}:{self.port} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except socket.error as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É: {e}")
            return False
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º"""
        if self.socket:
            self.socket.close()
            self.socket = None
            print("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
    
    def send_pjl_command(self, command: str) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PJL –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—Ç–µ—Ä—É
        
        Args:
            command: PJL –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.socket:
            print("‚úó –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é PJL –∫–æ–º–∞–Ω–¥—É
            full_command = f"\x1B%-12345X@PJL\r\n{command}\r\n@PJL EOJ\r\n\x1B%-12345X"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            self.socket.send(full_command.encode('ascii'))
            print(f"‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            time.sleep(1)
            response = ""
            try:
                while True:
                    data = self.socket.recv(1024).decode('ascii', errors='ignore')
                    if not data:
                        break
                    response += data
                    time.sleep(0.1)
            except socket.timeout:
                pass
            
            if response.strip():
                print(f"‚Üê –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {response.strip()}")
                return response.strip()
            
            return ""
            
        except socket.error as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    def get_scanner_counter(self) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Returns:
            –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞...")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã PJL –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
        commands = [
            "@PJL INQUIRE SCANCOUNT",
            "@PJL INQUIRE SCANCOUNTER", 
            "@PJL INQUIRE SCANPAGES",
            "@PJL INFO SCANCOUNT",
            "@PJL INFO SCANCOUNTER",
            "@PJL DINQUIRE SCANCOUNT",
            "@PJL DINQUIRE SCANCOUNTER"
        ]
        
        for command in commands:
            response = self.send_pjl_command(command)
            if response and "=" in response:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    value = response.split("=")[-1].strip()
                    counter_value = int(value)
                    print(f"‚úì –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter_value}")
                    return counter_value
                except (ValueError, IndexError):
                    continue
        
        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞")
        return None
    
    def set_scanner_counter(self, count: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            count: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ: {count}")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã PJL –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
        commands = [
            f"@PJL SET SCANCOUNT={count}",
            f"@PJL SET SCANCOUNTER={count}",
            f"@PJL SET SCANPAGES={count}",
            f"@PJL DEFAULT SCANCOUNT={count}",
            f"@PJL DEFAULT SCANCOUNTER={count}"
        ]
        
        success = False
        for command in commands:
            response = self.send_pjl_command(command)
            if response is not None:
                success = True
        
        if success:
            print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
            time.sleep(2)
            current_count = self.get_scanner_counter()
            if current_count == count:
                print(f"‚úì –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {count}")
                return True
            else:
                print(f"‚ö† –°—á–µ—Ç—á–∏–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_count})")
        
        return success
    
    def reset_scanner_counter(self) -> bool:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ 0
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        print("\nüîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...")
        return self.set_scanner_counter(0)
    
    def get_printer_info(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
        """
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ...")
        
        info = {}
        info_commands = {
            "model": "@PJL INFO ID",
            "status": "@PJL INFO STATUS", 
            "memory": "@PJL INFO MEMORY",
            "version": "@PJL INFO VERSION"
        }
        
        for key, command in info_commands.items():
            response = self.send_pjl_command(command)
            if response:
                info[key] = response
        
        return info


def print_printer_info(info: dict):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
    print("\n" + "="*50)
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–ò–ù–¢–ï–†–ï")
    print("="*50)
    
    for key, value in info.items():
        print(f"{key.upper()}: {value}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π HP LaserJet Pro 400",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python hp_scanner_counter.py 192.168.1.100 --get
  python hp_scanner_counter.py 192.168.1.100 --set 1000
  python hp_scanner_counter.py 192.168.1.100 --reset
  python hp_scanner_counter.py 192.168.1.100 --info
        """
    )
    
    parser.add_argument("ip", help="IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞")
    parser.add_argument("--port", type=int, default=9100, help="–ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9100)")
    parser.add_argument("--timeout", type=int, default=10, help="–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--get", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--set", type=int, metavar="COUNT", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
    group.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ 0")
    group.add_argument("--info", action="store_true", help="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ")
    
    args = parser.parse_args()
    
    print("üñ®Ô∏è  HP LaserJet Pro 400 Scanner Counter Control")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
    printer = HPPrinterPJL(args.ip, args.port, args.timeout)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
        if not printer.connect():
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if args.get:
            counter = printer.get_scanner_counter()
            if counter is not None:
                print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–µ—Ä–∞: {counter}")
            else:
                print("\n‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
                sys.exit(1)
                
        elif args.set is not None:
            if args.set < 0:
                print("‚úó –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                sys.exit(1)
            
            if printer.set_scanner_counter(args.set):
                print(f"\n‚úì –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args.set}")
            else:
                print(f"\n‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ {args.set}")
                sys.exit(1)
                
        elif args.reset:
            if printer.reset_scanner_counter():
                print("\n‚úì –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ 0")
            else:
                print("\n‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
                sys.exit(1)
                
        elif args.info:
            info = printer.get_printer_info()
            print_printer_info(info)
    
    except KeyboardInterrupt:
        print("\n\n‚ö† –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        printer.disconnect()


if __name__ == "__main__":
    main()
