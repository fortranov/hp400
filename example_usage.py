#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HP Scanner Counter Control Script
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º —Å–∫–∞–Ω–µ—Ä–∞
"""

import sys
import time
from hp_scanner_counter import HPPrinterPJL


def demo_scanner_operations(printer_ip: str):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º —Å–∫–∞–Ω–µ—Ä–∞
    
    Args:
        printer_ip: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    """
    print("üñ®Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º —Å–∫–∞–Ω–µ—Ä–∞ HP LaserJet Pro 400")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
    printer = HPPrinterPJL(printer_ip)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
        if not printer.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É")
            return False
        
        print("\n1Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ...")
        info = printer.get_printer_info()
        if info:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
            for key, value in info.items():
                print(f"   üìã {key.upper()}: {value}")
        
        print("\n2Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞...")
        original_count = printer.get_scanner_counter()
        if original_count is not None:
            print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: {original_count}")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞")
            return False
        
        print("\n3Ô∏è‚É£  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞...")
        test_value = 12345
        if printer.set_scanner_counter(test_value):
            print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {test_value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            time.sleep(2)
            current_count = printer.get_scanner_counter()
            if current_count == test_value:
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: —Å—á–µ—Ç—á–∏–∫ = {current_count}")
            else:
                print(f"‚ö†Ô∏è  –°—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {current_count}, –æ–∂–∏–¥–∞–ª–æ—Å—å {test_value}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ {test_value}")
        
        print("\n4Ô∏è‚É£  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è...")
        if printer.set_scanner_counter(original_count):
            print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {original_count}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        print("\n5Ô∏è‚É£  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞...")
        user_input = input("–•–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ 0? (y/n): ").lower().strip()
        if user_input == 'y':
            if printer.reset_scanner_counter():
                print("‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ 0")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                time.sleep(2)
                if printer.set_scanner_counter(original_count):
                    print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {original_count}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
        else:
            print("‚è≠Ô∏è  –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        printer.disconnect()


def batch_operations_example(printer_ip: str, values: list):
    """
    –ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º
    
    Args:
        printer_ip: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    print(f"\nüîÑ –ü–∞–∫–µ—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π: {values}")
    print("-" * 50)
    
    printer = HPPrinterPJL(printer_ip)
    
    try:
        if not printer.connect():
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        original_count = printer.get_scanner_counter()
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {original_count}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        for i, value in enumerate(values, 1):
            print(f"\nüìù –û–ø–µ—Ä–∞—Ü–∏—è {i}/{len(values)}: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ {value}")
            if printer.set_scanner_counter(value):
                print(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}")
                time.sleep(1)
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {value}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print(f"\nüîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {original_count}")
        printer.set_scanner_counter(original_count)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        printer.disconnect()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python example_usage.py <IP_–ø—Ä–∏–Ω—Ç–µ—Ä–∞>")
        print("–ü—Ä–∏–º–µ—Ä: python example_usage.py 192.168.1.100")
        sys.exit(1)
    
    printer_ip = sys.argv[1]
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        if demo_scanner_operations(printer_ip):
            
            # –ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            print("\n" + "="*70)
            test_values = [100, 500, 1000, 2500]
            user_input = input(f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ {test_values}? (y/n): ").lower().strip()
            
            if user_input == 'y':
                batch_operations_example(printer_ip, test_values)
            else:
                print("‚è≠Ô∏è  –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        
        print(f"\nüéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
